Tue Aug 15 2006 Stuart Hughes <stuarth@freescale.com>

This is a work-around for a bad toolchain we have (I can't change
that).  The problem is that tc-mtwk-x86lnx-m68k-ucl-3.4.0-9.i386.rpm
had bits/byteswap.h that calls assembly instructions that are
illegal for coldfire.  To work around this, I've copied
a fixed copy from freescale-coldfire-m68k-uclinux-4.1-14.i686.rpm
and put it into a local include/bits directory so it gets
found before the bad version.

The failure symptom was:
+ make -C util
make: Entering directory `/home/seh/ltib_bsps/head/rpm/BUILD/mtd/util'
gcc -I../include -O2 -Wall -g -c -o ftl_format.o ftl_format.c -g -Wp,-MD,.ftl_format.c.dep
/tmp/ccbDGFf1.s: Assembler messages:
/tmp/ccbDGFf1.s:573: Error: invalid instruction for this architecture; needs 68000 or higher -- statement `ror.w #8,%d4' ignored
/tmp/ccbDGFf1.s:573: Error: invalid instruction for this architecture; needs 680

Notes: I removed the architecture specific optimisations that cause some
some architectures to barf (PPC).


diff --exclude CVS -uNr mtd/include/bits/byteswap.h mtd.modified/include/bits/byteswap.h
--- mtd/include/bits/byteswap.h	1970-01-01 01:00:00.000000000 +0100
+++ mtd.modified/include/bits/byteswap.h	2006-08-15 14:54:30.000000000 +0100
@@ -0,0 +1,52 @@
+/* Macros to swap the order of bytes in integer values.  m68k version.
+   Copyright (C) 1997, 2002 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#if !defined _BYTESWAP_H && !defined _NETINET_IN_H
+# error "Never use <bits/byteswap.h> directly; include <byteswap.h> instead."
+#endif
+
+#ifndef _BITS_BYTESWAP_H
+#define _BITS_BYTESWAP_H 1
+
+/* Swap bytes in 16 bit value.  We don't provide an assembler version
+   because GCC is smart enough to generate optimal assembler output, and
+   this allows for better cse.  */
+#define __bswap_16(x) \
+  ((((x) >> 8) & 0xff) | (((x) & 0xff) << 8))
+
+/* Swap bytes in 32 bit value.  */
+#define __bswap_constant_32(x) \
+  ((((x) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >>  8) | \
+   (((x) & 0x0000ff00) <<  8) | (((x) & 0x000000ff) << 24))
+
+# define __bswap_32(x) __bswap_constant_32 (x)
+
+#if defined __GNUC__ && __GNUC__ >= 2
+/* Swap bytes in 64 bit value.  */
+# define __bswap_64(x) \
+  __extension__								\
+  ({ union { unsigned long long int __ll;				\
+	     unsigned long int __l[2]; } __bswap_64_v, __bswap_64_r;	\
+     __bswap_64_v.__ll = (x);						\
+     __bswap_64_r.__l[0] = __bswap_32 (__bswap_64_v.__l[1]);		\
+     __bswap_64_r.__l[1] = __bswap_32 (__bswap_64_v.__l[0]);		\
+     __bswap_64_r.__ll; })
+#endif
+
+#endif /* _BITS_BYTESWAP_H */
