Steve Papacharalambous <stevep@freescale.com>, 06 June 2006
This patch has been ported from:
http://gcc.gnu.org/ml/gcc-patches/2004-06/msg02208.html
The text from the original patch follows:
[snip]
This is the mail archive of the gcc-patches@gcc.gnu.org mailing list for
the GCC project </>.

------------------------------------------------------------------------
Index Nav:      [Date Index <index.html#02208>] [Subject Index
<subjects.html#02208>] [Author Index <authors.html#02208>] [Thread Index
<threads.html#02208>]
Message Nav:    [Date Prev <msg02207.html>] [Date Next <msg02209.html>]
[Thread Prev <msg02207.html>] [Thread Next <msg02210.html>]
Other format:   [Raw text
</cgi-bin/get-raw-msg?listname=gcc-patches&date=2004-06&msgid=87acyq6udu.fsf%40taltos.codesourcery.com>]



  Small tweaks for libiberty/cp-demangle.h, libobjc/encoding.c

    * /From/: Zack Weinberg <zack at codesourcery dot com>
    * /To/: gcc-patches at gcc dot gnu dot org
    * /Cc/: DJ Delorie <dj at redhat dot com>, Ziemowit Laski <zlaski at
      ziemas dot net>
    * /Date/: Sat, 26 Jun 2004 11:34:21 -0700
    * /Subject/: Small tweaks for libiberty/cp-demangle.h,
      libobjc/encoding.c

------------------------------------------------------------------------

While working on IMA I found two places where code falls foul of the
rule in C99 6.2.2p7: the same object is declared first 'extern' and
then 'static', which provokes compile-time undefined behavior.  This
rule has been discussed in the general case in the thread starting at
<http://gcc.gnu.org/ml/gcc/2004-06/msg01443.html> -- the consensus
there is in favor of making this an error.  The IMA patches are not
yet complete, so I would like to submit these changes separately; they
should have no effect other than avoiding this future problem.

Ok for mainline?

zw

libiberty:
        * cp-demangle.h: Declare cplus_demangle_operators,
        cplus_demangle_builtin_types, cplus_demangle_mangled_name, and
        cplus_demangle_type as static if IN_GLIBCPP_V3.
libobjc:
        * encoding.c: Rename target_flags with a #define to avoid
        conflict with a prior declaration.
[/snip]
===============================================================================
diff --exclude CVS -uNr gcc-3.4.3/libiberty/cp-demangle.h gcc-3.4.3.modified/libiberty/cp-demangle.h
--- gcc-3.4.3/libiberty/cp-demangle.h	Wed Feb 25 18:41:51 2004
+++ gcc-3.4.3.modified/libiberty/cp-demangle.h	Tue Jun  6 10:27:18 2006
@@ -131,19 +131,31 @@
 
 /* Functions and arrays in cp-demangle.c which are referenced by
    functions in cp-demint.c.  */
+#ifdef IN_GLIBCPP_V3
+#define CP_STATIC_IF_GLIBCPP_V3 static
+#else
+#define CP_STATIC_IF_GLIBCPP_V3 extern
+#endif
 
-extern const struct demangle_operator_info cplus_demangle_operators[];
+CP_STATIC_IF_GLIBCPP_V3
+const struct demangle_operator_info cplus_demangle_operators[];
 
 #define D_BUILTIN_TYPE_COUNT (26)
 
-extern const struct demangle_builtin_type_info
+CP_STATIC_IF_GLIBCPP_V3
+const struct demangle_builtin_type_info
 cplus_demangle_builtin_types[D_BUILTIN_TYPE_COUNT];
 
-extern struct demangle_component *
+CP_STATIC_IF_GLIBCPP_V3
+struct demangle_component *
 cplus_demangle_mangled_name PARAMS ((struct d_info *, int));
 
-extern struct demangle_component *
+CP_STATIC_IF_GLIBCPP_V3
+struct demangle_component *
 cplus_demangle_type PARAMS ((struct d_info *));
 
 extern void
 cplus_demangle_init_info PARAMS ((const char *, int, size_t, struct d_info *));
+
+/* cp-demangle.c needs to define this a little differently */
+#undef CP_STATIC_IF_GLIBCPP_V3
diff --exclude CVS -uNr gcc-3.4.3/libobjc/encoding.c gcc-3.4.3.modified/libobjc/encoding.c
--- gcc-3.4.3/libobjc/encoding.c	Sat Jan 17 19:51:59 2004
+++ gcc-3.4.3.modified/libobjc/encoding.c	Tue Jun  6 10:29:48 2006
@@ -83,10 +83,11 @@
 #define STRUCTURE_SIZE_BOUNDARY (BITS_PER_UNIT * sizeof (struct{char a;}))
 
 /* Some ROUND_TYPE_ALIGN macros use TARGET_foo, and consequently
-   target_flags.  Define a dummy entry here to so we don't die.  */
-/* ??? FIXME: As of 2002-06-21, the attribute `unused' doesn't seem to
-   eliminate the warning.  */
-static int __attribute__ ((__unused__)) target_flags = 0;
+   target_flags.  Define a dummy entry here to so we don't die.
+   We have to rename it because target_flags may already have been
+   declared extern.  */
+#define target_flags not_target_flags
+static int __attribute__ ((__unused__)) not_target_flags = 0;
 
 
 /*  FIXME: while this file has no business including tm.h, this
