<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>

<refentry id="ClutterActor">
<refmeta>
<refentrytitle role="top_of_page" id="ClutterActor.top_of_page">ClutterActor</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>CLUTTER Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ClutterActor</refname>
<refpurpose>Base abstract class for all visual stage actors.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="ClutterActor.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#define             <link linkend="CLUTTER-ACTOR-SET-FLAGS:CAPS">CLUTTER_ACTOR_SET_FLAGS</link>             (a,f)
#define             <link linkend="CLUTTER-ACTOR-UNSET-FLAGS:CAPS">CLUTTER_ACTOR_UNSET_FLAGS</link>           (a,f)
#define             <link linkend="CLUTTER-ACTOR-IS-MAPPED:CAPS">CLUTTER_ACTOR_IS_MAPPED</link>             (e)
#define             <link linkend="CLUTTER-ACTOR-IS-REALIZED:CAPS">CLUTTER_ACTOR_IS_REALIZED</link>           (e)
#define             <link linkend="CLUTTER-ACTOR-IS-VISIBLE:CAPS">CLUTTER_ACTOR_IS_VISIBLE</link>            (e)
#define             <link linkend="CLUTTER-ACTOR-IS-REACTIVE:CAPS">CLUTTER_ACTOR_IS_REACTIVE</link>           (e)

                    <link linkend="ClutterActorBox">ClutterActorBox</link>;
enum                <link linkend="ClutterActorFlags">ClutterActorFlags</link>;
enum                <link linkend="ClutterRequestMode">ClutterRequestMode</link>;
                    <link linkend="ClutterGeometry">ClutterGeometry</link>;
#define             <link linkend="CLUTTER-CALLBACK:CAPS">CLUTTER_CALLBACK</link>                    (f)
<link linkend="void">void</link>                (<link linkend="ClutterCallback">*ClutterCallback</link>)                  (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                         <link linkend="gpointer">gpointer</link> data);
                    <link linkend="ClutterActor-struct">ClutterActor</link>;
                    <link linkend="ClutterActorClass">ClutterActorClass</link>;
<link linkend="void">void</link>                <link linkend="clutter-actor-show">clutter_actor_show</link>                  (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-show-all">clutter_actor_show_all</link>              (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-hide">clutter_actor_hide</link>                  (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-hide-all">clutter_actor_hide_all</link>              (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-realize">clutter_actor_realize</link>               (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-unrealize">clutter_actor_unrealize</link>             (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-paint">clutter_actor_paint</link>                 (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-queue-redraw">clutter_actor_queue_redraw</link>          (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-queue-relayout">clutter_actor_queue_relayout</link>        (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-destroy">clutter_actor_destroy</link>               (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="gboolean">gboolean</link>            <link linkend="clutter-actor-event">clutter_actor_event</link>                 (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                         <link linkend="ClutterEvent">ClutterEvent</link> *event,
                                                         <link linkend="gboolean">gboolean</link> capture);
<link linkend="void">void</link>                <link linkend="clutter-actor-pick">clutter_actor_pick</link>                  (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         const <link linkend="ClutterColor">ClutterColor</link> *color);
<link linkend="gboolean">gboolean</link>            <link linkend="clutter-actor-should-pick-paint">clutter_actor_should_pick_paint</link>     (<link linkend="ClutterActor">ClutterActor</link> *self);

<link linkend="void">void</link>                <link linkend="clutter-actor-allocate">clutter_actor_allocate</link>              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         const <link linkend="ClutterActorBox">ClutterActorBox</link> *box,
                                                         <link linkend="gboolean">gboolean</link> absolute_origin_changed);
<link linkend="void">void</link>                <link linkend="clutter-actor-allocate-preferred-size">clutter_actor_allocate_preferred_size</link>
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gboolean">gboolean</link> absolute_origin_changed);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-allocation-coords">clutter_actor_get_allocation_coords</link> (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> *x_1,
                                                         <link linkend="gint">gint</link> *y_1,
                                                         <link linkend="gint">gint</link> *x_2,
                                                         <link linkend="gint">gint</link> *y_2);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-allocation-box">clutter_actor_get_allocation_box</link>    (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterActorBox">ClutterActorBox</link> *box);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-allocation-geometry">clutter_actor_get_allocation_geometry</link>
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterGeometry">ClutterGeometry</link> *geom);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-allocation-vertices">clutter_actor_get_allocation_vertices</link>
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterActor">ClutterActor</link> *ancestor,
                                                         <link linkend="ClutterVertex">ClutterVertex</link> verts[4]);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-preferred-size">clutter_actor_get_preferred_size</link>    (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *min_width_p,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *min_height_p,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *natural_width_p,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *natural_height_p);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-preferred-width">clutter_actor_get_preferred_width</link>   (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> for_height,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *min_width_p,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *natural_width_p);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-preferred-height">clutter_actor_get_preferred_height</link>  (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> for_width,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *min_height_p,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *natural_height_p);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-fixed-position-set">clutter_actor_set_fixed_position_set</link>
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gboolean">gboolean</link> is_set);
<link linkend="gboolean">gboolean</link>            <link linkend="clutter-actor-get-fixed-position-set">clutter_actor_get_fixed_position_set</link>
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self);

<link linkend="void">void</link>                <link linkend="clutter-actor-set-geometry">clutter_actor_set_geometry</link>          (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         const <link linkend="ClutterGeometry">ClutterGeometry</link> *geometry);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-geometry">clutter_actor_get_geometry</link>          (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterGeometry">ClutterGeometry</link> *geometry);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-size">clutter_actor_set_size</link>              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> width,
                                                         <link linkend="gint">gint</link> height);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-size">clutter_actor_get_size</link>              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="guint">guint</link> *width,
                                                         <link linkend="guint">guint</link> *height);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-position">clutter_actor_set_position</link>          (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-position">clutter_actor_get_position</link>          (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> *x,
                                                         <link linkend="gint">gint</link> *y);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-width">clutter_actor_set_width</link>             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="guint">guint</link> width);
<link linkend="guint">guint</link>               <link linkend="clutter-actor-get-width">clutter_actor_get_width</link>             (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-height">clutter_actor_set_height</link>            (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="guint">guint</link> height);
<link linkend="guint">guint</link>               <link linkend="clutter-actor-get-height">clutter_actor_get_height</link>            (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-x">clutter_actor_set_x</link>                 (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> x);
<link linkend="gint">gint</link>                <link linkend="clutter-actor-get-x">clutter_actor_get_x</link>                 (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-y">clutter_actor_set_y</link>                 (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> y);
<link linkend="gint">gint</link>                <link linkend="clutter-actor-get-y">clutter_actor_get_y</link>                 (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-move-by">clutter_actor_move_by</link>               (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> dx,
                                                         <link linkend="gint">gint</link> dy);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-rotation">clutter_actor_set_rotation</link>          (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterRotateAxis">ClutterRotateAxis</link> axis,
                                                         <link linkend="gdouble">gdouble</link> angle,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y,
                                                         <link linkend="gint">gint</link> z);
<link linkend="gdouble">gdouble</link>             <link linkend="clutter-actor-get-rotation">clutter_actor_get_rotation</link>          (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterRotateAxis">ClutterRotateAxis</link> axis,
                                                         <link linkend="gint">gint</link> *x,
                                                         <link linkend="gint">gint</link> *y,
                                                         <link linkend="gint">gint</link> *z);
<link linkend="gboolean">gboolean</link>            <link linkend="clutter-actor-is-rotated">clutter_actor_is_rotated</link>            (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-opacity">clutter_actor_set_opacity</link>           (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="guint8">guint8</link> opacity);
<link linkend="guint8">guint8</link>              <link linkend="clutter-actor-get-opacity">clutter_actor_get_opacity</link>           (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-name">clutter_actor_set_name</link>              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         const <link linkend="gchar">gchar</link> *name);
const <link linkend="gchar">gchar</link>*        <link linkend="clutter-actor-get-name">clutter_actor_get_name</link>              (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="guint32">guint32</link>             <link linkend="clutter-actor-get-gid">clutter_actor_get_gid</link>               (<link linkend="ClutterActor">ClutterActor</link> *self);

<link linkend="void">void</link>                <link linkend="clutter-actor-set-clip">clutter_actor_set_clip</link>              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> xoff,
                                                         <link linkend="gint">gint</link> yoff,
                                                         <link linkend="gint">gint</link> width,
                                                         <link linkend="gint">gint</link> height);
<link linkend="void">void</link>                <link linkend="clutter-actor-remove-clip">clutter_actor_remove_clip</link>           (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="gboolean">gboolean</link>            <link linkend="clutter-actor-has-clip">clutter_actor_has_clip</link>              (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-clip">clutter_actor_get_clip</link>              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> *xoff,
                                                         <link linkend="gint">gint</link> *yoff,
                                                         <link linkend="gint">gint</link> *width,
                                                         <link linkend="gint">gint</link> *height);

<link linkend="void">void</link>                <link linkend="clutter-actor-set-parent">clutter_actor_set_parent</link>            (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterActor">ClutterActor</link> *parent);
<link linkend="ClutterActor">ClutterActor</link>*       <link linkend="clutter-actor-get-parent">clutter_actor_get_parent</link>            (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-reparent">clutter_actor_reparent</link>              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterActor">ClutterActor</link> *new_parent);
<link linkend="void">void</link>                <link linkend="clutter-actor-unparent">clutter_actor_unparent</link>              (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-raise">clutter_actor_raise</link>                 (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterActor">ClutterActor</link> *below);
<link linkend="void">void</link>                <link linkend="clutter-actor-lower">clutter_actor_lower</link>                 (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterActor">ClutterActor</link> *above);
<link linkend="void">void</link>                <link linkend="clutter-actor-raise-top">clutter_actor_raise_top</link>             (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-lower-bottom">clutter_actor_lower_bottom</link>          (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="ClutterActor">ClutterActor</link>*       <link linkend="clutter-actor-get-stage">clutter_actor_get_stage</link>             (<link linkend="ClutterActor">ClutterActor</link> *actor);

<link linkend="void">void</link>                <link linkend="clutter-actor-set-depth">clutter_actor_set_depth</link>             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> depth);
<link linkend="gint">gint</link>                <link linkend="clutter-actor-get-depth">clutter_actor_get_depth</link>             (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-scale">clutter_actor_set_scale</link>             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gdouble">gdouble</link> scale_x,
                                                         <link linkend="gdouble">gdouble</link> scale_y);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-scale">clutter_actor_get_scale</link>             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gdouble">gdouble</link> *scale_x,
                                                         <link linkend="gdouble">gdouble</link> *scale_y);
<link linkend="gboolean">gboolean</link>            <link linkend="clutter-actor-is-scaled">clutter_actor_is_scaled</link>             (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-apply-transform-to-point">clutter_actor_apply_transform_to_point</link>
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterVertex">ClutterVertex</link> *point,
                                                         <link linkend="ClutterVertex">ClutterVertex</link> *vertex);
<link linkend="gboolean">gboolean</link>            <link linkend="clutter-actor-transform-stage-point">clutter_actor_transform_stage_point</link> (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> y,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *x_out,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *y_out);
<link linkend="void">void</link>                <link linkend="clutter-actor-apply-relative-transform-to-point">clutter_actor_apply_relative_transform_to_point</link>
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterActor">ClutterActor</link> *ancestor,
                                                         <link linkend="ClutterVertex">ClutterVertex</link> *point,
                                                         <link linkend="ClutterVertex">ClutterVertex</link> *vertex);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-transformed-position">clutter_actor_get_transformed_position</link>
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> *x,
                                                         <link linkend="gint">gint</link> *y);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-transformed-size">clutter_actor_get_transformed_size</link>  (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="guint">guint</link> *width,
                                                         <link linkend="guint">guint</link> *height);
<link linkend="guint8">guint8</link>              <link linkend="clutter-actor-get-paint-opacity">clutter_actor_get_paint_opacity</link>     (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-abs-allocation-vertices">clutter_actor_get_abs_allocation_vertices</link>
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterVertex">ClutterVertex</link> verts[4]);

                    <link linkend="ClutterVertex">ClutterVertex</link>;
<link linkend="void">void</link>                <link linkend="clutter-actor-box-get-from-vertices">clutter_actor_box_get_from_vertices</link> (<link linkend="ClutterVertex">ClutterVertex</link> vtx[4],
                                                         <link linkend="ClutterActorBox">ClutterActorBox</link> *box);

<link linkend="void">void</link>                <link linkend="clutter-actor-set-anchor-point">clutter_actor_set_anchor_point</link>      (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> anchor_x,
                                                         <link linkend="gint">gint</link> anchor_y);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-anchor-point">clutter_actor_get_anchor_point</link>      (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> *anchor_x,
                                                         <link linkend="gint">gint</link> *anchor_y);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-anchor-point-from-gravity">clutter_actor_set_anchor_point_from_gravity</link>
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterGravity">ClutterGravity</link> gravity);
<link linkend="void">void</link>                <link linkend="clutter-actor-move-anchor-point">clutter_actor_move_anchor_point</link>     (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> anchor_x,
                                                         <link linkend="gint">gint</link> anchor_y);
<link linkend="void">void</link>                <link linkend="clutter-actor-move-anchor-point-from-gravity">clutter_actor_move_anchor_point_from_gravity</link>
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterGravity">ClutterGravity</link> gravity);

<link linkend="void">void</link>                <link linkend="clutter-actor-set-reactive">clutter_actor_set_reactive</link>          (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                         <link linkend="gboolean">gboolean</link> reactive);
<link linkend="gboolean">gboolean</link>            <link linkend="clutter-actor-get-reactive">clutter_actor_get_reactive</link>          (<link linkend="ClutterActor">ClutterActor</link> *actor);
<link linkend="gboolean">gboolean</link>            <link linkend="clutter-actor-set-shader">clutter_actor_set_shader</link>            (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterShader">ClutterShader</link> *shader);
<link linkend="ClutterShader">ClutterShader</link>*      <link linkend="clutter-actor-get-shader">clutter_actor_get_shader</link>            (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-shader-param">clutter_actor_set_shader_param</link>      (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         const <link linkend="gchar">gchar</link> *param,
                                                         <link linkend="gfloat">gfloat</link> value);

<link linkend="void">void</link>                <link linkend="clutter-actor-set-depthu">clutter_actor_set_depthu</link>            (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> depth);
<link linkend="ClutterUnit">ClutterUnit</link>         <link linkend="clutter-actor-get-depthu">clutter_actor_get_depthu</link>            (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-heightu">clutter_actor_set_heightu</link>           (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> height);
<link linkend="ClutterUnit">ClutterUnit</link>         <link linkend="clutter-actor-get-heightu">clutter_actor_get_heightu</link>           (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-widthu">clutter_actor_set_widthu</link>            (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> width);
<link linkend="ClutterUnit">ClutterUnit</link>         <link linkend="clutter-actor-get-widthu">clutter_actor_get_widthu</link>            (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-xu">clutter_actor_set_xu</link>                (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> x);
<link linkend="ClutterUnit">ClutterUnit</link>         <link linkend="clutter-actor-get-xu">clutter_actor_get_xu</link>                (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-yu">clutter_actor_set_yu</link>                (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> y);
<link linkend="ClutterUnit">ClutterUnit</link>         <link linkend="clutter-actor-get-yu">clutter_actor_get_yu</link>                (<link linkend="ClutterActor">ClutterActor</link> *self);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-positionu">clutter_actor_set_positionu</link>         (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> y);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-positionu">clutter_actor_get_positionu</link>         (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *y);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-sizeu">clutter_actor_set_sizeu</link>             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> width,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> height);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-sizeu">clutter_actor_get_sizeu</link>             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *width,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *height);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-anchor-pointu">clutter_actor_set_anchor_pointu</link>     (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> anchor_x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> anchor_y);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-anchor-pointu">clutter_actor_get_anchor_pointu</link>     (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *anchor_x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *anchor_y);
<link linkend="void">void</link>                <link linkend="clutter-actor-move-anchor-pointu">clutter_actor_move_anchor_pointu</link>    (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> anchor_x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> anchor_y);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-clipu">clutter_actor_set_clipu</link>             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> xoff,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> yoff,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> width,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> height);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-clipu">clutter_actor_get_clipu</link>             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *xoff,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *yoff,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *width,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *height);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-rotationu">clutter_actor_set_rotationu</link>         (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterRotateAxis">ClutterRotateAxis</link> axis,
                                                         <link linkend="gdouble">gdouble</link> angle,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> y,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> z);
<link linkend="gdouble">gdouble</link>             <link linkend="clutter-actor-get-rotationu">clutter_actor_get_rotationu</link>         (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterRotateAxis">ClutterRotateAxis</link> axis,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *y,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *z);
<link linkend="void">void</link>                <link linkend="clutter-actor-move-byu">clutter_actor_move_byu</link>              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> dx,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> dy);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-transformed-positionu">clutter_actor_get_transformed_positionu</link>
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *y);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-transformed-sizeu">clutter_actor_get_transformed_sizeu</link> (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *width,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *height);

<link linkend="void">void</link>                <link linkend="clutter-actor-set-scalex">clutter_actor_set_scalex</link>            (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterFixed">ClutterFixed</link> scale_x,
                                                         <link linkend="ClutterFixed">ClutterFixed</link> scale_y);
<link linkend="void">void</link>                <link linkend="clutter-actor-get-scalex">clutter_actor_get_scalex</link>            (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterFixed">ClutterFixed</link> *scale_x,
                                                         <link linkend="ClutterFixed">ClutterFixed</link> *scale_y);
<link linkend="void">void</link>                <link linkend="clutter-actor-set-rotationx">clutter_actor_set_rotationx</link>         (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterRotateAxis">ClutterRotateAxis</link> axis,
                                                         <link linkend="ClutterFixed">ClutterFixed</link> angle,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y,
                                                         <link linkend="gint">gint</link> z);
<link linkend="ClutterFixed">ClutterFixed</link>        <link linkend="clutter-actor-get-rotationx">clutter_actor_get_rotationx</link>         (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterRotateAxis">ClutterRotateAxis</link> axis,
                                                         <link linkend="gint">gint</link> *x,
                                                         <link linkend="gint">gint</link> *y,
                                                         <link linkend="gint">gint</link> *z);
</synopsis>
</refsynopsisdiv>

<refsect1 id="ClutterActor.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="GInitiallyUnowned">GInitiallyUnowned</link>
         +----ClutterActor
               +----<link linkend="ClutterGroup">ClutterGroup</link>
               +----<link linkend="ClutterRectangle">ClutterRectangle</link>
               +----<link linkend="ClutterTexture">ClutterTexture</link>
               +----<link linkend="ClutterCloneTexture">ClutterCloneTexture</link>
               +----<link linkend="ClutterLabel">ClutterLabel</link>
               +----<link linkend="ClutterEntry">ClutterEntry</link>
</synopsis>

</refsect1>



<refsect1 id="ClutterActor.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
ClutterActor implements
</para>

</refsect1>


<refsect1 id="ClutterActor.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="ClutterActor--allocation">allocation</link>&quot;               <link linkend="ClutterActorBox">ClutterActorBox</link>*      : Read
  &quot;<link linkend="ClutterActor--anchor-x">anchor-x</link>&quot;                 <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="ClutterActor--anchor-y">anchor-y</link>&quot;                 <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="ClutterActor--clip">clip</link>&quot;                     <link linkend="ClutterGeometry">ClutterGeometry</link>*      : Read / Write
  &quot;<link linkend="ClutterActor--depth">depth</link>&quot;                    <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="ClutterActor--fixed-position-set">fixed-position-set</link>&quot;       <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="ClutterActor--fixed-x">fixed-x</link>&quot;                  <link linkend="ClutterUnit">ClutterUnit</link>           : Read / Write
  &quot;<link linkend="ClutterActor--fixed-y">fixed-y</link>&quot;                  <link linkend="ClutterUnit">ClutterUnit</link>           : Read / Write
  &quot;<link linkend="ClutterActor--has-clip">has-clip</link>&quot;                 <link linkend="gboolean">gboolean</link>              : Read
  &quot;<link linkend="ClutterActor--height">height</link>&quot;                   <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="ClutterActor--min-height">min-height</link>&quot;               <link linkend="ClutterUnit">ClutterUnit</link>           : Read / Write
  &quot;<link linkend="ClutterActor--min-height-set">min-height-set</link>&quot;           <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="ClutterActor--min-width">min-width</link>&quot;                <link linkend="ClutterUnit">ClutterUnit</link>           : Read / Write
  &quot;<link linkend="ClutterActor--min-width-set">min-width-set</link>&quot;            <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="ClutterActor--name">name</link>&quot;                     <link linkend="gchar">gchar</link>*                : Read / Write
  &quot;<link linkend="ClutterActor--natural-height">natural-height</link>&quot;           <link linkend="ClutterUnit">ClutterUnit</link>           : Read / Write
  &quot;<link linkend="ClutterActor--natural-height-set">natural-height-set</link>&quot;       <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="ClutterActor--natural-width">natural-width</link>&quot;            <link linkend="ClutterUnit">ClutterUnit</link>           : Read / Write
  &quot;<link linkend="ClutterActor--natural-width-set">natural-width-set</link>&quot;        <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="ClutterActor--opacity">opacity</link>&quot;                  <link linkend="guchar">guchar</link>                : Read / Write
  &quot;<link linkend="ClutterActor--reactive">reactive</link>&quot;                 <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="ClutterActor--request-mode">request-mode</link>&quot;             <link linkend="ClutterRequestMode">ClutterRequestMode</link>    : Read / Write
  &quot;<link linkend="ClutterActor--rotation-angle-x">rotation-angle-x</link>&quot;         <link linkend="gdouble">gdouble</link>               : Read / Write
  &quot;<link linkend="ClutterActor--rotation-angle-y">rotation-angle-y</link>&quot;         <link linkend="gdouble">gdouble</link>               : Read / Write
  &quot;<link linkend="ClutterActor--rotation-angle-z">rotation-angle-z</link>&quot;         <link linkend="gdouble">gdouble</link>               : Read / Write
  &quot;<link linkend="ClutterActor--rotation-center-x">rotation-center-x</link>&quot;        <link linkend="ClutterVertex">ClutterVertex</link>*        : Read / Write
  &quot;<link linkend="ClutterActor--rotation-center-y">rotation-center-y</link>&quot;        <link linkend="ClutterVertex">ClutterVertex</link>*        : Read / Write
  &quot;<link linkend="ClutterActor--rotation-center-z">rotation-center-z</link>&quot;        <link linkend="ClutterVertex">ClutterVertex</link>*        : Read / Write
  &quot;<link linkend="ClutterActor--scale-x">scale-x</link>&quot;                  <link linkend="gdouble">gdouble</link>               : Read / Write
  &quot;<link linkend="ClutterActor--scale-y">scale-y</link>&quot;                  <link linkend="gdouble">gdouble</link>               : Read / Write
  &quot;<link linkend="ClutterActor--show-on-set-parent">show-on-set-parent</link>&quot;       <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="ClutterActor--visible">visible</link>&quot;                  <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="ClutterActor--width">width</link>&quot;                    <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="ClutterActor--x">x</link>&quot;                        <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="ClutterActor--y">y</link>&quot;                        <link linkend="gint">gint</link>                  : Read / Write
</synopsis>
</refsect1>

<refsect1 id="ClutterActor.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="ClutterActor-button-press-event">button-press-event</link>&quot;                             : Run Last
  &quot;<link linkend="ClutterActor-button-release-event">button-release-event</link>&quot;                           : Run Last
  &quot;<link linkend="ClutterActor-captured-event">captured-event</link>&quot;                                 : Run Last
  &quot;<link linkend="ClutterActor-destroy">destroy</link>&quot;                                        : Cleanup / No Recursion / No Hooks
  &quot;<link linkend="ClutterActor-enter-event">enter-event</link>&quot;                                    : Run Last
  &quot;<link linkend="ClutterActor-event">event</link>&quot;                                          : Run Last
  &quot;<link linkend="ClutterActor-focus-in">focus-in</link>&quot;                                       : Run Last
  &quot;<link linkend="ClutterActor-focus-out">focus-out</link>&quot;                                      : Run Last
  &quot;<link linkend="ClutterActor-hide">hide</link>&quot;                                           : Run First
  &quot;<link linkend="ClutterActor-key-press-event">key-press-event</link>&quot;                                : Run Last
  &quot;<link linkend="ClutterActor-key-release-event">key-release-event</link>&quot;                              : Run Last
  &quot;<link linkend="ClutterActor-leave-event">leave-event</link>&quot;                                    : Run Last
  &quot;<link linkend="ClutterActor-motion-event">motion-event</link>&quot;                                   : Run Last
  &quot;<link linkend="ClutterActor-paint">paint</link>&quot;                                          : Run Last
  &quot;<link linkend="ClutterActor-parent-set">parent-set</link>&quot;                                     : Run Last
  &quot;<link linkend="ClutterActor-realize">realize</link>&quot;                                        : Run Last
  &quot;<link linkend="ClutterActor-scroll-event">scroll-event</link>&quot;                                   : Run Last
  &quot;<link linkend="ClutterActor-show">show</link>&quot;                                           : Run First
  &quot;<link linkend="ClutterActor-unrealize">unrealize</link>&quot;                                      : Run Last
</synopsis>
</refsect1>


<refsect1 id="ClutterActor.description" role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="ClutterActor"><type>ClutterActor</type></link> is a base abstract class for all visual elements on the
stage. Every object that must appear on the main <link linkend="ClutterStage"><type>ClutterStage</type></link> must also
be a <link linkend="ClutterActor"><type>ClutterActor</type></link>, either by using one of the classes provided by
Clutter, or by implementing a new <link linkend="ClutterActor"><type>ClutterActor</type></link> subclass.
</para>
<para>
Every actor is a 2D surface positioned and optionally transformed
in 3D space. The actor is positioned relative to top left corner of
it parent with the childs origin being its anchor point (also top
left by default).
</para>
<para>
The actors 2D surface is contained inside its bounding box,
described by the <link linkend="ClutterActorBox"><type>ClutterActorBox</type></link> structure:
</para>
<para>
<figure id="actor-box">
  <title>Bounding box of an Actor</title>
  <graphic fileref="actor-box.png" format="PNG"/>
</figure>
</para>
<para>
The actor box represents the untransformed area occupied by an
actor. Each visible actor that has been put on a <link linkend="ClutterStage"><type>ClutterStage</type></link> also
has a transformed area, depending on the actual transformations
applied to it by the developer (scale, rotation). Tranforms will
also be applied to any child actors. Also applied to all actors by
the <link linkend="ClutterStage"><type>ClutterStage</type></link> is a perspective transformation. API is provided
for both tranformed and untransformed actor geometry information.
</para>
<para>
The 'modelview' transform matrix for the actor is constructed from
the actor settings by the following order of operations:
<orderedlist>
  <listitem><para>Translation by actor x, y coords,</para></listitem>
  <listitem><para>Scaling by scale_x, scale_y,</para></listitem>
  <listitem><para>Negative translation by anchor point x,
  y,</para></listitem>
  <listitem><para>Rotation around z axis,</para></listitem>
  <listitem><para>Rotation around y axis,</para></listitem>
  <listitem><para>Rotation around x axis,</para></listitem>
  <listitem><para>Translation by actor depth (z),</para></listitem>
  <listitem><para>Rectangular Clip is applied (this is not an operation on
  the matrix as such, but it is done as part of the transform set
  up).</para></listitem>
</orderedlist>
</para>
<para>
An actor can either be explicitly sized and positioned, using the
various size and position accessors, like <link linkend="clutter-actor-set-x"><function>clutter_actor_set_x()</function></link> or
<link linkend="clutter-actor-set-width"><function>clutter_actor_set_width()</function></link>; or it can have a preferred width and
height, which then allows a layout manager to implicitly size and
position it by "allocating" an area for an actor. This allows for
actors to be manipulate in both a fixed or static parent container
(i.e. children of <link linkend="ClutterGroup"><type>ClutterGroup</type></link>) and a more automatic or dynamic
layout based parent container.
</para>
<para>
When accessing the position and size of an actor, the simple accessors
like <link linkend="clutter-actor-get-width"><function>clutter_actor_get_width()</function></link> and <link linkend="clutter-actor-get-x"><function>clutter_actor_get_x()</function></link> will return
a value depending on whether the actor has been explicitly sized and
positioned by the developer or implicitly by the layout manager.
</para>
<para>
Depending on whether you are querying an actor or implementing a
layout manager, you should either use the simple accessors or use the
size negotiation API.
</para>
<para>
Clutter actors are also able to receive input events and react to
them. Events are handled in the following ways:
</para>
<para>
<orderedlist>
  <listitem><para>Actors emit pointer events if set reactive, see
  <link linkend="clutter-actor-set-reactive"><function>clutter_actor_set_reactive()</function></link></para></listitem>
  <listitem><para>The stage is always reactive</para></listitem>
  <listitem><para>Events are handled by connecting signal handlers to
  the numerous event signal types.</para></listitem>
  <listitem><para>Event handlers must return <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if they handled
  the event and wish to block the event emission chain, or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>
  if the emission chain must continue</para></listitem>
  <listitem><para>Keyboard events are emitted if actor has focus, see
  <link linkend="clutter-stage-set-key-focus"><function>clutter_stage_set_key_focus()</function></link></para></listitem>
  <listitem><para>Motion events (motion, enter, leave) are not emitted
  if <link linkend="clutter-set-motion-events-enabled"><function>clutter_set_motion_events_enabled()</function></link> is called with <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>.
  See <link linkend="clutter-set-motion-events-enabled"><function>clutter_set_motion_events_enabled()</function></link> documentation for more
  information.</para></listitem>
  <listitem><para>Once emitted, an event emission chain has two
  phases: capture and bubble. An emitted event starts in the capture
  phase (see ClutterActor::captured-event) beginning at the stage and
  traversing every child actor until the event source actor is reached.
  The emission then enters the bubble phase, traversing back up the
  chain via parents until it reaches the stage. Any event handler can
  abort this chain by returning <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> (meaning "event handled").
  </para></listitem>
  <listitem><para>Pointer events will 'pass through' non reactive
  overlapping actors.</para></listitem>
</orderedlist>
</para>
<para>
<figure id="event-flow">
  <title>Event flow in Clutter</title>
  <graphic fileref="event-flow.png" format="PNG"/>
</figure>
</para>
<para>
Every '?' box in the diagram above is an entry point for application
code.
</para>
<para>
For implementing a new custom actor class, please read <link
linkend="clutter-subclassing-ClutterActor">the corresponding section</link>
of the API reference.</para>
<para>

</para>
</refsect1>

<refsect1 id="ClutterActor.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="CLUTTER-ACTOR-SET-FLAGS:CAPS" role="macro">
<title>CLUTTER_ACTOR_SET_FLAGS()</title>
<indexterm zone="CLUTTER-ACTOR-SET-FLAGS:CAPS"><primary>CLUTTER_ACTOR_SET_FLAGS</primary></indexterm><programlisting>#define CLUTTER_ACTOR_SET_FLAGS(a,f)    (((ClutterActor*)(a))-&gt;flags |= (f))
</programlisting>
<para>
Sets the given flags on a <link linkend="ClutterActor"><type>ClutterActor</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>f</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="ClutterActorFlags"><type>ClutterActorFlags</type></link> to set
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="CLUTTER-ACTOR-UNSET-FLAGS:CAPS" role="macro">
<title>CLUTTER_ACTOR_UNSET_FLAGS()</title>
<indexterm zone="CLUTTER-ACTOR-UNSET-FLAGS:CAPS"><primary>CLUTTER_ACTOR_UNSET_FLAGS</primary></indexterm><programlisting>#define CLUTTER_ACTOR_UNSET_FLAGS(a,f)  (((ClutterActor*)(a))-&gt;flags &amp;= ~(f))
</programlisting>
<para>
Unsets the given flags on a <link linkend="ClutterActor"><type>ClutterActor</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>f</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="ClutterActorFlags"><type>ClutterActorFlags</type></link> to unset
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="CLUTTER-ACTOR-IS-MAPPED:CAPS" role="macro" condition="since:0.2">
<title>CLUTTER_ACTOR_IS_MAPPED()</title>
<indexterm zone="CLUTTER-ACTOR-IS-MAPPED:CAPS" role="0.2"><primary>CLUTTER_ACTOR_IS_MAPPED</primary></indexterm><programlisting>#define CLUTTER_ACTOR_IS_MAPPED(e)      (((ClutterActor*)(e))-&gt;flags &amp; CLUTTER_ACTOR_MAPPED)
</programlisting>
<para>
Evaluates to <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <link linkend="CLUTTER-ACTOR-MAPPED:CAPS"><literal>CLUTTER_ACTOR_MAPPED</literal></link> flag is set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>e</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.2
</para></refsect2>
<refsect2 id="CLUTTER-ACTOR-IS-REALIZED:CAPS" role="macro" condition="since:0.2">
<title>CLUTTER_ACTOR_IS_REALIZED()</title>
<indexterm zone="CLUTTER-ACTOR-IS-REALIZED:CAPS" role="0.2"><primary>CLUTTER_ACTOR_IS_REALIZED</primary></indexterm><programlisting>#define CLUTTER_ACTOR_IS_REALIZED(e)    (((ClutterActor*)(e))-&gt;flags &amp; CLUTTER_ACTOR_REALIZED)
</programlisting>
<para>
Evaluates to <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <link linkend="CLUTTER-ACTOR-REALIZED:CAPS"><literal>CLUTTER_ACTOR_REALIZED</literal></link> flag is set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>e</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.2
</para></refsect2>
<refsect2 id="CLUTTER-ACTOR-IS-VISIBLE:CAPS" role="macro" condition="since:0.2">
<title>CLUTTER_ACTOR_IS_VISIBLE()</title>
<indexterm zone="CLUTTER-ACTOR-IS-VISIBLE:CAPS" role="0.2"><primary>CLUTTER_ACTOR_IS_VISIBLE</primary></indexterm><programlisting>#define CLUTTER_ACTOR_IS_VISIBLE(e)     (CLUTTER_ACTOR_IS_MAPPED (e) &amp;&amp; CLUTTER_ACTOR_IS_REALIZED (e))
</programlisting>
<para>
Evaluates to <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the actor is both realized and mapped.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>e</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.2
</para></refsect2>
<refsect2 id="CLUTTER-ACTOR-IS-REACTIVE:CAPS" role="macro" condition="since:0.6">
<title>CLUTTER_ACTOR_IS_REACTIVE()</title>
<indexterm zone="CLUTTER-ACTOR-IS-REACTIVE:CAPS" role="0.6"><primary>CLUTTER_ACTOR_IS_REACTIVE</primary></indexterm><programlisting>#define CLUTTER_ACTOR_IS_REACTIVE(e)    (((ClutterActor*)(e))-&gt;flags &amp; CLUTTER_ACTOR_REACTIVE)
</programlisting>
<para>
Evaluates to <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the <link linkend="CLUTTER-ACTOR-REACTIVE:CAPS"><literal>CLUTTER_ACTOR_REACTIVE</literal></link> flag is set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>e</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="ClutterActorBox" role="struct">
<title>ClutterActorBox</title>
<indexterm zone="ClutterActorBox"><primary>ClutterActorBox</primary></indexterm><programlisting>typedef struct {
  ClutterUnit x1;
  ClutterUnit y1;
  ClutterUnit x2;
  ClutterUnit y2;
} ClutterActorBox;
</programlisting>
<para>
Bounding box of an actor. The coordinates of the top left and right bottom
corners of an actor. The coordinates of the two points are expressed in
<link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s, that is are device-independent. If you want to obtain
the box dimensions in pixels, use <link linkend="clutter-actor-get-geometry"><function>clutter_actor_get_geometry()</function></link>.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="ClutterUnit">ClutterUnit</link>&nbsp;<structfield>x1</structfield>;</term>
<listitem><simpara> X coordinate of the top left corner
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="ClutterUnit">ClutterUnit</link>&nbsp;<structfield>y1</structfield>;</term>
<listitem><simpara> Y coordinate of the top left corner
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="ClutterUnit">ClutterUnit</link>&nbsp;<structfield>x2</structfield>;</term>
<listitem><simpara> X coordinate of the bottom right corner
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="ClutterUnit">ClutterUnit</link>&nbsp;<structfield>y2</structfield>;</term>
<listitem><simpara> Y coordinate of the bottom right corner
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="ClutterActorFlags" role="enum">
<title>enum ClutterActorFlags</title>
<indexterm zone="ClutterActorFlags"><primary>ClutterActorFlags</primary></indexterm><programlisting>typedef enum
{
  CLUTTER_ACTOR_MAPPED   = 1 &lt;&lt; 1,
  CLUTTER_ACTOR_REALIZED = 1 &lt;&lt; 2,
  CLUTTER_ACTOR_REACTIVE = 1 &lt;&lt; 3
} ClutterActorFlags;
</programlisting>
<para>
Flags used to signal the state of an actor.</para>
<para>

</para><variablelist role="enum">
<varlistentry id="CLUTTER-ACTOR-MAPPED:CAPS" role="constant">
<term><literal>CLUTTER_ACTOR_MAPPED</literal></term>
<listitem><simpara> the actor has been painted
</simpara></listitem>
</varlistentry>
<varlistentry id="CLUTTER-ACTOR-REALIZED:CAPS" role="constant">
<term><literal>CLUTTER_ACTOR_REALIZED</literal></term>
<listitem><simpara> the resources associated to the actor have been
  allocated
</simpara></listitem>
</varlistentry>
<varlistentry id="CLUTTER-ACTOR-REACTIVE:CAPS" role="constant">
<term><literal>CLUTTER_ACTOR_REACTIVE</literal></term>
<listitem><simpara> the actor 'reacts' to mouse events emmitting event
  signals
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="ClutterRequestMode" role="enum" condition="since:0.8">
<title>enum ClutterRequestMode</title>
<indexterm zone="ClutterRequestMode" role="0.8"><primary>ClutterRequestMode</primary></indexterm><programlisting>typedef enum {
  CLUTTER_REQUEST_HEIGHT_FOR_WIDTH,
  CLUTTER_REQUEST_WIDTH_FOR_HEIGHT
} ClutterRequestMode;
</programlisting>
<para>
Specifies the type of requests for a <link linkend="ClutterActor"><type>ClutterActor</type></link>.</para>
<para>

</para><variablelist role="enum">
<varlistentry id="CLUTTER-REQUEST-HEIGHT-FOR-WIDTH:CAPS" role="constant">
<term><literal>CLUTTER_REQUEST_HEIGHT_FOR_WIDTH</literal></term>
<listitem><simpara> Height for width requests
</simpara></listitem>
</varlistentry>
<varlistentry id="CLUTTER-REQUEST-WIDTH-FOR-HEIGHT:CAPS" role="constant">
<term><literal>CLUTTER_REQUEST_WIDTH_FOR_HEIGHT</literal></term>
<listitem><simpara> Width for height requests
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="ClutterGeometry" role="struct">
<title>ClutterGeometry</title>
<indexterm zone="ClutterGeometry"><primary>ClutterGeometry</primary></indexterm><programlisting>typedef struct {
  gint   x;
  gint   y;
  guint  width;
  guint  height;
} ClutterGeometry;
</programlisting>
<para>
The rectangle containing an actor's bounding box, measured in pixels.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="gint">gint</link>&nbsp;<structfield>x</structfield>;</term>
<listitem><simpara> X coordinate of the top left corner of an actor
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link>&nbsp;<structfield>y</structfield>;</term>
<listitem><simpara> Y coordinate of the top left corner of an actor
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint">guint</link>&nbsp;<structfield>width</structfield>;</term>
<listitem><simpara> width of an actor
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint">guint</link>&nbsp;<structfield>height</structfield>;</term>
<listitem><simpara> height of an actor
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="CLUTTER-CALLBACK:CAPS" role="macro">
<title>CLUTTER_CALLBACK()</title>
<indexterm zone="CLUTTER-CALLBACK:CAPS"><primary>CLUTTER_CALLBACK</primary></indexterm><programlisting>#define CLUTTER_CALLBACK(f)        ((ClutterCallback) (f))
</programlisting>
<para>
Convenience macro to cast a function to <link linkend="ClutterCallback"><type>ClutterCallback</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>f</parameter>&nbsp;:</term>
<listitem><simpara> a function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ClutterCallback" role="function">
<title>ClutterCallback ()</title>
<indexterm zone="ClutterCallback"><primary>ClutterCallback</primary></indexterm><programlisting><link linkend="void">void</link>                (*ClutterCallback)                  (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Generic callback</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> user data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ClutterActor-struct" role="struct">
<title>ClutterActor</title>
<indexterm zone="ClutterActor-struct"><primary>ClutterActor</primary></indexterm><programlisting>typedef struct {
  guint32 flags;
} ClutterActor;
</programlisting>
<para>
Base class for actors.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="guint32">guint32</link>&nbsp;<structfield>flags</structfield>;</term>
<listitem><simpara> <link linkend="ClutterActorFlags"><type>ClutterActorFlags</type></link>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="ClutterActorClass" role="struct">
<title>ClutterActorClass</title>
<indexterm zone="ClutterActorClass"><primary>ClutterActorClass</primary></indexterm><programlisting>typedef struct {
  void (* show)                 (ClutterActor          *actor);
  void (* show_all)             (ClutterActor          *actor);
  void (* hide)                 (ClutterActor          *actor);
  void (* hide_all)             (ClutterActor          *actor);
  void (* realize)              (ClutterActor          *actor);
  void (* unrealize)            (ClutterActor          *actor);
  void (* paint)                (ClutterActor          *actor);
  void (* parent_set)           (ClutterActor          *actor,
                                 ClutterActor          *old_parent);

  void (* destroy)              (ClutterActor          *actor);
  void (* pick)                 (ClutterActor          *actor,
                                 const ClutterColor    *color);

  /* size negotiation */
  void (* get_preferred_width)  (ClutterActor          *actor,
                                 ClutterUnit            for_height,
                                 ClutterUnit           *min_width_p,
                                 ClutterUnit           *natural_width_p);
  void (* get_preferred_height) (ClutterActor          *actor,
                                 ClutterUnit            for_width,
                                 ClutterUnit           *min_height_p,
                                 ClutterUnit           *natural_height_p);
  void (* allocate)             (ClutterActor          *actor,
                                 const ClutterActorBox *box,
                                 gboolean               absolute_origin_changed);
  /* event signals */
  gboolean (* event)                (ClutterActor         *actor,
                                     ClutterEvent         *event);
  gboolean (* button_press_event)   (ClutterActor         *actor,
                                     ClutterButtonEvent   *event);
  gboolean (* button_release_event) (ClutterActor         *actor,
                                     ClutterButtonEvent   *event);
  gboolean (* scroll_event)         (ClutterActor         *actor,
                                     ClutterScrollEvent   *event);
  gboolean (* key_press_event)      (ClutterActor         *actor,
                                     ClutterKeyEvent      *event);
  gboolean (* key_release_event)    (ClutterActor         *actor,
                                     ClutterKeyEvent      *event);
  gboolean (* motion_event)         (ClutterActor         *actor,
                                     ClutterMotionEvent   *event);
  gboolean (* enter_event)          (ClutterActor         *actor,
                                     ClutterCrossingEvent *event);
  gboolean (* leave_event)          (ClutterActor         *actor,
                                     ClutterCrossingEvent *event);
  gboolean (* captured_event)       (ClutterActor         *actor,
                                     ClutterEvent         *event);
  void     (* focus_in)             (ClutterActor         *actor);
  void     (* focus_out)            (ClutterActor         *actor);
} ClutterActorClass;
</programlisting>
<para>
Base class for actors.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><structfield>show</structfield>&nbsp;()</term>
<listitem><simpara> signal class handler for <link linkend="ClutterActor-show"><type>"show"</type></link>; it must chain
  up to the parent's implementation
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>show_all</structfield>&nbsp;()</term>
<listitem><simpara> virtual function for containers and composite actors, to
  determine which children should be shown when calling
  <link linkend="clutter-actor-show-all"><function>clutter_actor_show_all()</function></link> on the actor. Defaults to calling
  <link linkend="clutter-actor-show"><function>clutter_actor_show()</function></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>hide</structfield>&nbsp;()</term>
<listitem><simpara> signal class handler for <link linkend="ClutterActor-hide"><type>"hide"</type></link>; it must chain
  up to the parent's implementation
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>hide_all</structfield>&nbsp;()</term>
<listitem><simpara> virtual function for containers and composite actors, to
  determine which children should be shown when calling
  <link linkend="clutter-actor-hide-all"><function>clutter_actor_hide_all()</function></link> on the actor. Defaults to calling
  <link linkend="clutter-actor-hide"><function>clutter_actor_hide()</function></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>realize</structfield>&nbsp;()</term>
<listitem><simpara> virtual function, used to allocate resources for the actor;
  it should chain up to the parent's implementation
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>unrealize</structfield>&nbsp;()</term>
<listitem><simpara> virtual function, used to deallocate resources allocated
  in ::realize; it should chain up to the parent's implementation
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>paint</structfield>&nbsp;()</term>
<listitem><simpara> virtual function, used to paint the actor
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>parent_set</structfield>&nbsp;()</term>
<listitem><simpara> signal class handler for the <link linkend="ClutterActor-parent-set"><type>"parent-set"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>destroy</structfield>&nbsp;()</term>
<listitem><simpara> signal class handler for <link linkend="ClutterActor-destroy"><type>"destroy"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>pick</structfield>&nbsp;()</term>
<listitem><simpara> virtual function, used to draw an outline of the actor with
  the given color
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>get_preferred_width</structfield>&nbsp;()</term>
<listitem><simpara> virtual function, used when querying the minimum
  and natural widths of an actor for a given height; it is used by
  <link linkend="clutter-actor-get-preferred-width"><function>clutter_actor_get_preferred_width()</function></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>get_preferred_height</structfield>&nbsp;()</term>
<listitem><simpara> virtual function, used when querying the minimum
  and natural heights of an actor for a given width; it is used by
  <link linkend="clutter-actor-get-preferred-height"><function>clutter_actor_get_preferred_height()</function></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>allocate</structfield>&nbsp;()</term>
<listitem><simpara> virtual function, used when settings the coordinates of an
  actor; it is used by <link linkend="clutter-actor-allocate"><function>clutter_actor_allocate()</function></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>event</structfield>&nbsp;()</term>
<listitem><simpara> class handler for <link linkend="ClutterActor-event"><type>"event"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>button_press_event</structfield>&nbsp;()</term>
<listitem><simpara> class handler for <link linkend="ClutterActor-button-press-event"><type>"button-press-event"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>button_release_event</structfield>&nbsp;()</term>
<listitem><simpara> class handler for
  <link linkend="ClutterActor-button-release-event"><type>"button-release-event"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>scroll_event</structfield>&nbsp;()</term>
<listitem><simpara> signal class closure for <link linkend="ClutterActor-scroll-event"><type>"scroll-event"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>key_press_event</structfield>&nbsp;()</term>
<listitem><simpara> signal class closure for <link linkend="ClutterActor-key-press-event"><type>"key-press-event"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>key_release_event</structfield>&nbsp;()</term>
<listitem><simpara> signal class closure for
  <link linkend="ClutterActor-key-release-event"><type>"key-release-event"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>motion_event</structfield>&nbsp;()</term>
<listitem><simpara> signal class closure for <link linkend="ClutterActor-motion-event"><type>"motion-event"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>enter_event</structfield>&nbsp;()</term>
<listitem><simpara> signal class closure for <link linkend="ClutterActor-enter-event"><type>"enter-event"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>leave_event</structfield>&nbsp;()</term>
<listitem><simpara> signal class closure for <link linkend="ClutterActor-leave-event"><type>"leave-event"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>captured_event</structfield>&nbsp;()</term>
<listitem><simpara> signal class closure for <link linkend="ClutterActor-captured-event"><type>"captured-event"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>focus_in</structfield>&nbsp;()</term>
<listitem><simpara> signal class closure for <link linkend="ClutterActor-focus-in"><type>"focus-in"</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>focus_out</structfield>&nbsp;()</term>
<listitem><simpara> signal class closure for <link linkend="ClutterActor-focus-out"><type>"focus-out"</type></link>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-show" role="function">
<title>clutter_actor_show ()</title>
<indexterm zone="clutter-actor-show"><primary>clutter_actor_show</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_show                  (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Flags an actor to be displayed. An actor that isn't shown will not
be rendered on the stage.
</para>
<para>
Actors are visible by default.
</para>
<para>
If this function is called on an actor without a parent, the
<link linkend="ClutterActor--show-on-set-parent"><type>"show-on-set-parent"</type></link> will be set to <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> as a side
effect.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-show-all" role="function" condition="since:0.2">
<title>clutter_actor_show_all ()</title>
<indexterm zone="clutter-actor-show-all" role="0.2"><primary>clutter_actor_show_all</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_show_all              (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Calls <link linkend="clutter-actor-show"><function>clutter_actor_show()</function></link> on all children of an actor (if any).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.2
</para></refsect2>
<refsect2 id="clutter-actor-hide" role="function">
<title>clutter_actor_hide ()</title>
<indexterm zone="clutter-actor-hide"><primary>clutter_actor_hide</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_hide                  (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Flags an actor to be hidden. A hidden actor will not be
rendered on the stage.
</para>
<para>
Actors are visible by default.
</para>
<para>
If this function is called on an actor without a parent, the
<link linkend="ClutterActor--show-on-set-parent"><type>"show-on-set-parent"</type></link> property will be set to <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>
as a side-effect.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-hide-all" role="function" condition="since:0.2">
<title>clutter_actor_hide_all ()</title>
<indexterm zone="clutter-actor-hide-all" role="0.2"><primary>clutter_actor_hide_all</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_hide_all              (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Calls <link linkend="clutter-actor-hide"><function>clutter_actor_hide()</function></link> on all child actors (if any).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.2
</para></refsect2>
<refsect2 id="clutter-actor-realize" role="function">
<title>clutter_actor_realize ()</title>
<indexterm zone="clutter-actor-realize"><primary>clutter_actor_realize</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_realize               (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Creates any underlying graphics resources needed by the actor to be
displayed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-unrealize" role="function">
<title>clutter_actor_unrealize ()</title>
<indexterm zone="clutter-actor-unrealize"><primary>clutter_actor_unrealize</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_unrealize             (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Frees up any underlying graphics resources needed by the actor to be
displayed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-paint" role="function">
<title>clutter_actor_paint ()</title>
<indexterm zone="clutter-actor-paint"><primary>clutter_actor_paint</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_paint                 (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Renders the actor to display.
</para>
<para>
This function should not be called directly by applications.
Call <link linkend="clutter-actor-queue-redraw"><function>clutter_actor_queue_redraw()</function></link> to queue paints, instead.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-queue-redraw" role="function">
<title>clutter_actor_queue_redraw ()</title>
<indexterm zone="clutter-actor-queue-redraw"><primary>clutter_actor_queue_redraw</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_queue_redraw          (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Queues up a redraw of an actor and any children. The redraw occurs
once the main loop becomes idle (after the current batch of events
has been processed, roughly).
</para>
<para>
Applications rarely need to call this, as redraws are handled
automatically by modification functions.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-queue-relayout" role="function" condition="since:0.8">
<title>clutter_actor_queue_relayout ()</title>
<indexterm zone="clutter-actor-queue-relayout" role="0.8"><primary>clutter_actor_queue_relayout</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_queue_relayout        (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Indicates that the actor's size request or other layout-affecting
properties may have changed. This function is used inside <link linkend="ClutterActor"><type>ClutterActor</type></link>
subclass implementations, not by applications directly.
</para>
<para>
Queueing a new layout automatically queues a redraw as well.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-destroy" role="function">
<title>clutter_actor_destroy ()</title>
<indexterm zone="clutter-actor-destroy"><primary>clutter_actor_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_destroy               (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Destroys an actor.  When an actor is destroyed, it will break any
references it holds to other objects.  If the actor is inside a
container, the actor will be removed.
</para>
<para>
When you destroy a container, its children will be destroyed as well.
</para>
<para>
Note: you cannot destroy the <link linkend="ClutterStage"><type>ClutterStage</type></link> returned by
<link linkend="clutter-stage-get-default"><function>clutter_stage_get_default()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-event" role="function" condition="since:0.6">
<title>clutter_actor_event ()</title>
<indexterm zone="clutter-actor-event" role="0.6"><primary>clutter_actor_event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            clutter_actor_event                 (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                         <link linkend="ClutterEvent">ClutterEvent</link> *event,
                                                         <link linkend="gboolean">gboolean</link> capture);</programlisting>
<para>
This function is used to emit an event on the main stage.
You should rarely need to use this function, except for
synthetising events.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterEvent"><type>ClutterEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>capture</parameter>&nbsp;:</term>
<listitem><simpara> TRUE if event in in capture phase, FALSE otherwise.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the return value from the signal emission: <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>
  if the actor handled the event, or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> if the event was
  not handled

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-pick" role="function">
<title>clutter_actor_pick ()</title>
<indexterm zone="clutter-actor-pick"><primary>clutter_actor_pick</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_pick                  (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         const <link linkend="ClutterColor">ClutterColor</link> *color);</programlisting>
<para>
Renders a silhouette of the actor using the supplied color. Used
internally for mapping pointer events to actors.
</para>
<para>
This function should never be called directly by applications.
</para>
<para>
Subclasses overiding the ClutterActor::<link linkend="pick"><function>pick()</function></link> method should call
<link linkend="clutter-actor-should-pick-paint"><function>clutter_actor_should_pick_paint()</function></link> to decide whether to render their
silhouette. Containers should always recursively call pick for
each child.
</para>
<para>
Since 0.4</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterColor"><type>ClutterColor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-should-pick-paint" role="function">
<title>clutter_actor_should_pick_paint ()</title>
<indexterm zone="clutter-actor-should-pick-paint"><primary>clutter_actor_should_pick_paint</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            clutter_actor_should_pick_paint     (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Utility call for subclasses overiding the pick method.
</para>
<para>
This function should never be called directly by applications.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the actor should paint its silhouette,
  <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-allocate" role="function" condition="since:0.8">
<title>clutter_actor_allocate ()</title>
<indexterm zone="clutter-actor-allocate" role="0.8"><primary>clutter_actor_allocate</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_allocate              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         const <link linkend="ClutterActorBox">ClutterActorBox</link> *box,
                                                         <link linkend="gboolean">gboolean</link> absolute_origin_changed);</programlisting>
<para>
Called by the parent of an actor to assign the actor its size.
Should never be called by applications (except when implementing
a container or layout manager).
</para>
<para>
Actors can know from their allocation box whether they have moved
with respect to their parent actor. The absolute_origin_changed
parameter additionally indicates whether the parent has moved with
respect to the stage, for example because a grandparent's origin
has moved.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>box</parameter>&nbsp;:</term>
<listitem><simpara> new allocation of the actor, in parent-relative coordinates
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>absolute_origin_changed</parameter>&nbsp;:</term>
<listitem><simpara> whether the position of the parent has
  changed in stage coordinates
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-allocate-preferred-size" role="function" condition="since:0.8">
<title>clutter_actor_allocate_preferred_size ()</title>
<indexterm zone="clutter-actor-allocate-preferred-size" role="0.8"><primary>clutter_actor_allocate_preferred_size</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_allocate_preferred_size
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gboolean">gboolean</link> absolute_origin_changed);</programlisting>
<para>
Allocates the natural size of <parameter>self</parameter>.
</para>
<para>
This function is a utility call for <link linkend="ClutterActor"><type>ClutterActor</type></link> implementations
that allocates the actor's preferred natural size. It can be used
by fixed layout managers (like <link linkend="ClutterGroup"><type>ClutterGroup</type></link> or so called
'composite actors') inside the ClutterActor::allocate
implementation to give each child exactly how much space it
requires.
</para>
<para>
This function is not meant to be used by applications. It is also
not meant to be used outside the implementation of the
ClutterActor::allocate virtual function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>absolute_origin_changed</parameter>&nbsp;:</term>
<listitem><simpara> whether the position of the parent has
  changed in stage coordinates
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-get-allocation-coords" role="function" condition="since:0.8">
<title>clutter_actor_get_allocation_coords ()</title>
<indexterm zone="clutter-actor-get-allocation-coords" role="0.8"><primary>clutter_actor_get_allocation_coords</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_allocation_coords (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> *x_1,
                                                         <link linkend="gint">gint</link> *y_1,
                                                         <link linkend="gint">gint</link> *x_2,
                                                         <link linkend="gint">gint</link> *y_2);</programlisting>
<para>
Gets the layout box an actor has been assigned.  The allocation can
only be assumed valid inside a <link linkend="paint"><function>paint()</function></link> method; anywhere else, it
may be out-of-date.
</para>
<para>
An allocation does not incorporate the actor's scale or anchor point;
those transformations do not affect layout, only rendering.
</para>
<para>
The returned coordinates are in pixels.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x_1</parameter>&nbsp;:</term>
<listitem><simpara> x1 coordinate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_1</parameter>&nbsp;:</term>
<listitem><simpara> y1 coordinate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x_2</parameter>&nbsp;:</term>
<listitem><simpara> x2 coordinate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_2</parameter>&nbsp;:</term>
<listitem><simpara> y2 coordinate
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-get-allocation-box" role="function" condition="since:0.8">
<title>clutter_actor_get_allocation_box ()</title>
<indexterm zone="clutter-actor-get-allocation-box" role="0.8"><primary>clutter_actor_get_allocation_box</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_allocation_box    (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterActorBox">ClutterActorBox</link> *box);</programlisting>
<para>
Gets the layout box an actor has been assigned. The allocation can
only be assumed valid inside a <link linkend="paint"><function>paint()</function></link> method; anywhere else, it
may be out-of-date.
</para>
<para>
An allocation does not incorporate the actor's scale or anchor point;
those transformations do not affect layout, only rendering.
</para>
<para>
<note>Do not call any of the clutter_actor_get_allocation_*() family
of functions inside the implementation of the <link linkend="get-preferred-width"><function>get_preferred_width()</function></link>
or <link linkend="get-preferred-height"><function>get_preferred_height()</function></link> virtual functions.</note></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>box</parameter>&nbsp;:</term>
<listitem><simpara> the function fills this in with the actor's allocation
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-get-allocation-geometry" role="function" condition="since:0.8">
<title>clutter_actor_get_allocation_geometry ()</title>
<indexterm zone="clutter-actor-get-allocation-geometry" role="0.8"><primary>clutter_actor_get_allocation_geometry</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_allocation_geometry
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterGeometry">ClutterGeometry</link> *geom);</programlisting>
<para>
Gets the layout box an actor has been assigned.  The allocation can
only be assumed valid inside a <link linkend="paint"><function>paint()</function></link> method; anywhere else, it
may be out-of-date.
</para>
<para>
An allocation does not incorporate the actor's scale or anchor point;
those transformations do not affect layout, only rendering.
</para>
<para>
The returned rectangle is in pixels.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>geom</parameter>&nbsp;:</term>
<listitem><simpara> allocation geometry in pixels
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-get-allocation-vertices" role="function" condition="since:0.6">
<title>clutter_actor_get_allocation_vertices ()</title>
<indexterm zone="clutter-actor-get-allocation-vertices" role="0.6"><primary>clutter_actor_get_allocation_vertices</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_allocation_vertices
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterActor">ClutterActor</link> *ancestor,
                                                         <link linkend="ClutterVertex">ClutterVertex</link> verts[4]);</programlisting>
<para>
Calculates the transformed coordinates of the four corners of the
actor in the plane of <parameter>ancestor</parameter>. The returned vertices relate to
the <link linkend="ClutterActorBox"><type>ClutterActorBox</type></link> coordinates as follows:
<itemizedlist>
  <listitem><para>v[0] contains (x1, y1)</para></listitem>
  <listitem><para>v[1] contains (x2, y1)</para></listitem>
  <listitem><para>v[2] contains (x1, y2)</para></listitem>
  <listitem><para>v[3] contains (x2, y2)</para></listitem>
</itemizedlist>
</para>
<para>
If <parameter>ancestor</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link> the ancestor will be the <link linkend="ClutterStage"><type>ClutterStage</type></link>. In
this case, the coordinates returned will be the coordinates on
the stage before the projection is applied. This is different from
the behaviour of <link linkend="clutter-actor-get-abs-allocation-vertices"><function>clutter_actor_get_abs_allocation_vertices()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ancestor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link> to calculate the vertices against, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
  to use the default <link linkend="ClutterStage"><type>ClutterStage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>verts</parameter>&nbsp;:</term>
<listitem><simpara> return location for an array of 4 <link linkend="ClutterVertex"><type>ClutterVertex</type></link> in which
  to store the result.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-preferred-size" role="function" condition="since:0.8">
<title>clutter_actor_get_preferred_size ()</title>
<indexterm zone="clutter-actor-get-preferred-size" role="0.8"><primary>clutter_actor_get_preferred_size</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_preferred_size    (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *min_width_p,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *min_height_p,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *natural_width_p,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *natural_height_p);</programlisting>
<para>
Computes the preferred minimum and natural size of an actor, taking into
account the actor's geometry management (either height-for-width
or width-for-height).
</para>
<para>
The width and height used to compute the preferred height and preferred
width are the actor's natural ones.
</para>
<para>
If you need to control the height for the preferred width, or the width for
the preferred height, you should use <link linkend="clutter-actor-get-preferred-width"><function>clutter_actor_get_preferred_width()</function></link>
and <link linkend="clutter-actor-get-preferred-height"><function>clutter_actor_get_preferred_height()</function></link>, and check the actor's preferred
geometry management using the <link linkend="ClutterActor--request-mode"><type>"request-mode"</type></link> property.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>min_width_p</parameter>&nbsp;:</term>
<listitem><simpara> return location for the minimum width, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>min_height_p</parameter>&nbsp;:</term>
<listitem><simpara> return location for the minimum height, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>natural_width_p</parameter>&nbsp;:</term>
<listitem><simpara> return location for the natural width, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>natural_height_p</parameter>&nbsp;:</term>
<listitem><simpara> return location for the natural height, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-get-preferred-width" role="function" condition="since:0.8">
<title>clutter_actor_get_preferred_width ()</title>
<indexterm zone="clutter-actor-get-preferred-width" role="0.8"><primary>clutter_actor_get_preferred_width</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_preferred_width   (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> for_height,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *min_width_p,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *natural_width_p);</programlisting>
<para>
Computes the requested minimum and natural widths for an actor,
optionally depending on the specified height, or if they are
already computed, returns the cached values.
</para>
<para>
An actor may not get its request - depending on the layout
manager that's in effect.
</para>
<para>
A request should not incorporate the actor's scale or anchor point;
those transformations do not affect layout, only rendering.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>for_height</parameter>&nbsp;:</term>
<listitem><simpara> available height when computing the preferred width,
  or a negative value to indicate that no height is defined
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>min_width_p</parameter>&nbsp;:</term>
<listitem><simpara> return location for minimum width, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>natural_width_p</parameter>&nbsp;:</term>
<listitem><simpara> return location for the natural width, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-get-preferred-height" role="function" condition="since:0.8">
<title>clutter_actor_get_preferred_height ()</title>
<indexterm zone="clutter-actor-get-preferred-height" role="0.8"><primary>clutter_actor_get_preferred_height</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_preferred_height  (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> for_width,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *min_height_p,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *natural_height_p);</programlisting>
<para>
Computes the requested minimum and natural heights for an actor,
or if they are already computed, returns the cached values.
</para>
<para>
An actor may not get its request - depending on the layout
manager that's in effect.
</para>
<para>
A request should not incorporate the actor's scale or anchor point;
those transformations do not affect layout, only rendering.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>for_width</parameter>&nbsp;:</term>
<listitem><simpara> available width to assume in computing desired height,
  or a negative value to indicate that no width is defined
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>min_height_p</parameter>&nbsp;:</term>
<listitem><simpara> return location for minimum height, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>natural_height_p</parameter>&nbsp;:</term>
<listitem><simpara> return location for natural height, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-set-fixed-position-set" role="function" condition="since:0.8">
<title>clutter_actor_set_fixed_position_set ()</title>
<indexterm zone="clutter-actor-set-fixed-position-set" role="0.8"><primary>clutter_actor_set_fixed_position_set</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_fixed_position_set
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gboolean">gboolean</link> is_set);</programlisting>
<para>
Sets whether an actor has a fixed position set (and will thus be
unaffected by any layout manager).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>is_set</parameter>&nbsp;:</term>
<listitem><simpara> whether to use fixed position
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-get-fixed-position-set" role="function" condition="since:0.8">
<title>clutter_actor_get_fixed_position_set ()</title>
<indexterm zone="clutter-actor-get-fixed-position-set" role="0.8"><primary>clutter_actor_get_fixed_position_set</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            clutter_actor_get_fixed_position_set
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Checks whether an actor has a fixed position set (and will thus be
unaffected by any layout manager).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the fixed position is set on the actor

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-set-geometry" role="function">
<title>clutter_actor_set_geometry ()</title>
<indexterm zone="clutter-actor-set-geometry"><primary>clutter_actor_set_geometry</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_geometry          (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         const <link linkend="ClutterGeometry">ClutterGeometry</link> *geometry);</programlisting>
<para>
Sets the actor's fixed position and forces its minimum and natural
size, in pixels. This means the untransformed actor will have the
given geometry. This is the same as calling <link linkend="clutter-actor-set-position"><function>clutter_actor_set_position()</function></link>
and <link linkend="clutter-actor-set-size"><function>clutter_actor_set_size()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>geometry</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterGeometry"><type>ClutterGeometry</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-get-geometry" role="function">
<title>clutter_actor_get_geometry ()</title>
<indexterm zone="clutter-actor-get-geometry"><primary>clutter_actor_get_geometry</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_geometry          (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterGeometry">ClutterGeometry</link> *geometry);</programlisting>
<para>
Gets the size and position of an actor relative to its parent
actor. This is the same as calling <link linkend="clutter-actor-get-position"><function>clutter_actor_get_position()</function></link> and
<link linkend="clutter-actor-get-size"><function>clutter_actor_get_size()</function></link>. It tries to "do what you mean" and get the
requested size and position if the actor's allocation is invalid.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>geometry</parameter>&nbsp;:</term>
<listitem><simpara> A location to store actors <link linkend="ClutterGeometry"><type>ClutterGeometry</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-set-size" role="function">
<title>clutter_actor_set_size ()</title>
<indexterm zone="clutter-actor-set-size"><primary>clutter_actor_set_size</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_size              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> width,
                                                         <link linkend="gint">gint</link> height);</programlisting>
<para>
Sets the actor's size request in pixels. This overrides any
"normal" size request the actor would have. For example
a text actor might normally request the size of the text;
this function would force a specific size instead.
</para>
<para>
If <parameter>width</parameter> and/or <parameter>height</parameter> are -1 the actor will use its
"normal" size request instead of overriding it, i.e.
you can "unset" the size with -1.
</para>
<para>
This function sets or unsets both the minimum and natural size.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> New width of actor in pixels, or -1
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> New height of actor in pixels, or -1
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-get-size" role="function" condition="since:0.2">
<title>clutter_actor_get_size ()</title>
<indexterm zone="clutter-actor-get-size" role="0.2"><primary>clutter_actor_get_size</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_size              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="guint">guint</link> *width,
                                                         <link linkend="guint">guint</link> *height);</programlisting>
<para>
This function tries to "do what you mean" and return
the size an actor will have. If the actor has a valid
allocation, the allocation will be returned; otherwise,
the actors natural size request will be returned.
</para>
<para>
If you care whether you get the request vs. the allocation, you
should probably call a different function like
<link linkend="clutter-actor-get-allocation-coords"><function>clutter_actor_get_allocation_coords()</function></link> or
<link linkend="clutter-actor-get-preferred-width"><function>clutter_actor_get_preferred_width()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> return location for the width, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> return location for the height, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.2
</para></refsect2>
<refsect2 id="clutter-actor-set-position" role="function">
<title>clutter_actor_set_position ()</title>
<indexterm zone="clutter-actor-set-position"><primary>clutter_actor_set_position</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_position          (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y);</programlisting>
<para>
Sets the actor's fixed position in pixels relative to any parent
actor.
</para>
<para>
If a layout manager is in use, this position will override the
layout manager and force a fixed position.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> New left position of actor in pixels.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> New top position of actor in pixels.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-get-position" role="function" condition="since:0.6">
<title>clutter_actor_get_position ()</title>
<indexterm zone="clutter-actor-get-position" role="0.6"><primary>clutter_actor_get_position</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_position          (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> *x,
                                                         <link linkend="gint">gint</link> *y);</programlisting>
<para>
This function tries to "do what you mean" and tell you where the
actor is, prior to any transformations. Retrieves the fixed
position of an actor in pixels, if one has been set; otherwise, if
the allocation is valid, returns the actor's allocated position;
otherwise, returns 0,0.
</para>
<para>
The returned position is in pixels.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> return location for the X coordinate, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> return location for the Y coordinate, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-width" role="function" condition="since:0.2">
<title>clutter_actor_set_width ()</title>
<indexterm zone="clutter-actor-set-width" role="0.2"><primary>clutter_actor_set_width</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_width             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="guint">guint</link> width);</programlisting>
<para>
Forces a width on an actor, causing the actor's preferred width
and height (if any) to be ignored.
</para>
<para>
This function sets both the minimum and natural size of the actor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> Requested new width for the actor, in pixels
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.2
</para></refsect2>
<refsect2 id="clutter-actor-get-width" role="function">
<title>clutter_actor_get_width ()</title>
<indexterm zone="clutter-actor-get-width"><primary>clutter_actor_get_width</primary></indexterm><programlisting><link linkend="guint">guint</link>               clutter_actor_get_width             (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the width of a <link linkend="ClutterActor"><type>ClutterActor</type></link>.
</para>
<para>
If the actor has a valid allocation, this function will return the
width of the allocated area given to the actor.
</para>
<para>
If the actor does not have a valid allocation, this function will
return the actor's natural width, that is the preferred width of
the actor.
</para>
<para>
If you care whether you get the preferred width or the width that
has been assigned to the actor, you should probably call a different
function like <link linkend="clutter-actor-get-allocation-coords"><function>clutter_actor_get_allocation_coords()</function></link> to retrieve the
allocated size or <link linkend="clutter-actor-get-preferred-width"><function>clutter_actor_get_preferred_width()</function></link> to retrieve the
preferred width.
</para>
<para>
If an actor has a fixed width, for instance a width that has been
assigned using <link linkend="clutter-actor-set-width"><function>clutter_actor_set_width()</function></link>, the width returned will
be the same value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the width of the actor, in pixels
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-set-height" role="function" condition="since:0.2">
<title>clutter_actor_set_height ()</title>
<indexterm zone="clutter-actor-set-height" role="0.2"><primary>clutter_actor_set_height</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_height            (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="guint">guint</link> height);</programlisting>
<para>
Forces a height on an actor, causing the actor's preferred width
and height (if any) to be ignored.
</para>
<para>
This function sets both the minimum and natural size of the actor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> Requested new height for the actor, in pixels
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.2
</para></refsect2>
<refsect2 id="clutter-actor-get-height" role="function">
<title>clutter_actor_get_height ()</title>
<indexterm zone="clutter-actor-get-height"><primary>clutter_actor_get_height</primary></indexterm><programlisting><link linkend="guint">guint</link>               clutter_actor_get_height            (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the height of a <link linkend="ClutterActor"><type>ClutterActor</type></link>.
</para>
<para>
If the actor has a valid allocation, this function will return the
height of the allocated area given to the actor.
</para>
<para>
If the actor does not have a valid allocation, this function will
return the actor's natural height, that is the preferred height of
the actor.
</para>
<para>
If you care whether you get the preferred height or the height that
has been assigned to the actor, you should probably call a different
function like <link linkend="clutter-actor-get-allocation-coords"><function>clutter_actor_get_allocation_coords()</function></link> to retrieve the
allocated size or <link linkend="clutter-actor-get-preferred-height"><function>clutter_actor_get_preferred_height()</function></link> to retrieve the
preferred height.
</para>
<para>
If an actor has a fixed height, for instance a height that has been
assigned using <link linkend="clutter-actor-set-height"><function>clutter_actor_set_height()</function></link>, the height returned will
be the same value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the height of the actor, in pixels
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-set-x" role="function" condition="since:0.6">
<title>clutter_actor_set_x ()</title>
<indexterm zone="clutter-actor-set-x" role="0.6"><primary>clutter_actor_set_x</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_x                 (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> x);</programlisting>
<para>
Sets the actor's X coordinate, relative to its parent, in pixels.
</para>
<para>
Overrides any layout manager and forces a fixed position for
the actor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> the actor's position on the X axis
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-x" role="function">
<title>clutter_actor_get_x ()</title>
<indexterm zone="clutter-actor-get-x"><primary>clutter_actor_get_x</primary></indexterm><programlisting><link linkend="gint">gint</link>                clutter_actor_get_x                 (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the X coordinate of a <link linkend="ClutterActor"><type>ClutterActor</type></link>.
</para>
<para>
This function tries to "do what you mean", by returning the
correct value depending on the actor's state.
</para>
<para>
If the actor has a valid allocation, this function will return
the X coordinate of the origin of the allocation box.
</para>
<para>
If the actor has any fixed coordinate set using <link linkend="clutter-actor-set-x"><function>clutter_actor_set_x()</function></link>,
<link linkend="clutter-actor-set-position"><function>clutter_actor_set_position()</function></link> or <link linkend="clutter-actor-set-geometry"><function>clutter_actor_set_geometry()</function></link>, this
function will return that coordinate.
</para>
<para>
If both the allocation and a fixed position are missing, this function
will return 0.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the X coordinate, in pixels, ignoring any
  transformation (i.e. scaling, rotation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-set-y" role="function" condition="since:0.6">
<title>clutter_actor_set_y ()</title>
<indexterm zone="clutter-actor-set-y" role="0.6"><primary>clutter_actor_set_y</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_y                 (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> y);</programlisting>
<para>
Sets the actor's Y coordinate, relative to its parent, in pixels.#
</para>
<para>
Overrides any layout manager and forces a fixed position for
the actor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> the actor's position on the Y axis
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-y" role="function">
<title>clutter_actor_get_y ()</title>
<indexterm zone="clutter-actor-get-y"><primary>clutter_actor_get_y</primary></indexterm><programlisting><link linkend="gint">gint</link>                clutter_actor_get_y                 (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the Y coordinate of a <link linkend="ClutterActor"><type>ClutterActor</type></link>.
</para>
<para>
This function tries to "do what you mean", by returning the
correct value depending on the actor's state.
</para>
<para>
If the actor has a valid allocation, this function will return
the Y coordinate of the origin of the allocation box.
</para>
<para>
If the actor has any fixed coordinate set using <link linkend="clutter-actor-set-y"><function>clutter_actor_set_y()</function></link>,
<link linkend="clutter-actor-set-position"><function>clutter_actor_set_position()</function></link> or <link linkend="clutter-actor-set-geometry"><function>clutter_actor_set_geometry()</function></link>, this
function will return that coordinate.
</para>
<para>
If both the allocation and a fixed position are missing, this function
will return 0.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the Y coordinate, in pixels, ignoring any
  transformation (i.e. scaling, rotation)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-move-by" role="function" condition="since:0.2">
<title>clutter_actor_move_by ()</title>
<indexterm zone="clutter-actor-move-by" role="0.2"><primary>clutter_actor_move_by</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_move_by               (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> dx,
                                                         <link linkend="gint">gint</link> dy);</programlisting>
<para>
Moves an actor by the specified distance relative to its current
position in pixels. This function modifies the fixed position of an
actor and thus removes it from any layout management. Another way
to move an actor is with an anchor point, see
<link linkend="clutter-actor-set-anchor-point"><function>clutter_actor_set_anchor_point()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dx</parameter>&nbsp;:</term>
<listitem><simpara> Distance to move Actor on X axis.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dy</parameter>&nbsp;:</term>
<listitem><simpara> Distance to move Actor on Y axis.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.2
</para></refsect2>
<refsect2 id="clutter-actor-set-rotation" role="function" condition="since:0.6">
<title>clutter_actor_set_rotation ()</title>
<indexterm zone="clutter-actor-set-rotation" role="0.6"><primary>clutter_actor_set_rotation</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_rotation          (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterRotateAxis">ClutterRotateAxis</link> axis,
                                                         <link linkend="gdouble">gdouble</link> angle,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y,
                                                         <link linkend="gint">gint</link> z);</programlisting>
<para>
Sets the rotation angle of <parameter>self</parameter> around the given axis.
</para>
<para>
The rotation center coordinates used depend on the value of <parameter>axis</parameter>:
<itemizedlist>
  <listitem><para><link linkend="CLUTTER-X-AXIS:CAPS"><literal>CLUTTER_X_AXIS</literal></link> requires <parameter>y</parameter> and <parameter>z</parameter></para></listitem>
  <listitem><para><link linkend="CLUTTER-Y-AXIS:CAPS"><literal>CLUTTER_Y_AXIS</literal></link> requires <parameter>x</parameter> and <parameter>z</parameter></para></listitem>
  <listitem><para><link linkend="CLUTTER-Z-AXIS:CAPS"><literal>CLUTTER_Z_AXIS</literal></link> requires <parameter>x</parameter> and <parameter>y</parameter></para></listitem>
</itemizedlist>
</para>
<para>
The rotation coordinates are relative to the anchor point of the
actor, set using <link linkend="clutter-actor-set-anchor-point"><function>clutter_actor_set_anchor_point()</function></link>. If no anchor
point is set, the upper left corner is assumed as the origin.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>axis</parameter>&nbsp;:</term>
<listitem><simpara> the axis of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>angle</parameter>&nbsp;:</term>
<listitem><simpara> the angle of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> X coordinate of the rotation center
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> Y coordinate of the rotation center
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>z</parameter>&nbsp;:</term>
<listitem><simpara> Z coordinate of the rotation center
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-rotation" role="function" condition="since:0.6">
<title>clutter_actor_get_rotation ()</title>
<indexterm zone="clutter-actor-get-rotation" role="0.6"><primary>clutter_actor_get_rotation</primary></indexterm><programlisting><link linkend="gdouble">gdouble</link>             clutter_actor_get_rotation          (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterRotateAxis">ClutterRotateAxis</link> axis,
                                                         <link linkend="gint">gint</link> *x,
                                                         <link linkend="gint">gint</link> *y,
                                                         <link linkend="gint">gint</link> *z);</programlisting>
<para>
Retrieves the angle and center of rotation on the given axis,
set using <link linkend="clutter-actor-set-angle"><function>clutter_actor_set_angle()</function></link>.
</para>
<para>
The coordinates of the center returned by this function depend on
the axis passed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>axis</parameter>&nbsp;:</term>
<listitem><simpara> the axis of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> return value for the X coordinate of the center of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> return value for the Y coordinate of the center of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>z</parameter>&nbsp;:</term>
<listitem><simpara> return value for the Z coordinate of the center of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the angle of rotation.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-is-rotated" role="function" condition="since:0.6">
<title>clutter_actor_is_rotated ()</title>
<indexterm zone="clutter-actor-is-rotated" role="0.6"><primary>clutter_actor_is_rotated</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            clutter_actor_is_rotated            (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Checks whether any rotation is applied to the actor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the actor is rotated.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-opacity" role="function">
<title>clutter_actor_set_opacity ()</title>
<indexterm zone="clutter-actor-set-opacity"><primary>clutter_actor_set_opacity</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_opacity           (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="guint8">guint8</link> opacity);</programlisting>
<para>
Sets the actor's opacity, with zero being completely transparent and
255 (0xff) being fully opaque.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opacity</parameter>&nbsp;:</term>
<listitem><simpara> New opacity value for the actor.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-get-opacity" role="function">
<title>clutter_actor_get_opacity ()</title>
<indexterm zone="clutter-actor-get-opacity"><primary>clutter_actor_get_opacity</primary></indexterm><programlisting><link linkend="guint8">guint8</link>              clutter_actor_get_opacity           (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the opacity value of an actor, as set by
<link linkend="clutter-actor-set-opacity"><function>clutter_actor_set_opacity()</function></link>.
</para>
<para>
For retrieving the absolute opacity of the actor inside a paint
virtual function, see <link linkend="clutter-actor-get-paint-opacity"><function>clutter_actor_get_paint_opacity()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the opacity of the actor
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-set-name" role="function">
<title>clutter_actor_set_name ()</title>
<indexterm zone="clutter-actor-set-name"><primary>clutter_actor_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_name              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Sets the given name to <parameter>self</parameter>. The name can be used to identify
a <link linkend="ClutterActor"><type>ClutterActor</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> Textual tag to apply to actor
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-get-name" role="function">
<title>clutter_actor_get_name ()</title>
<indexterm zone="clutter-actor-get-name"><primary>clutter_actor_get_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>*        clutter_actor_get_name              (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the name of <parameter>self</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the name of the actor, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. The returned string is
  owned by the actor and should not be modified or freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-get-gid" role="function" condition="since:0.6">
<title>clutter_actor_get_gid ()</title>
<indexterm zone="clutter-actor-get-gid" role="0.6"><primary>clutter_actor_get_gid</primary></indexterm><programlisting><link linkend="guint32">guint32</link>             clutter_actor_get_gid               (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the unique id for <parameter>self</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> Globally unique value for this object instance.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-clip" role="function">
<title>clutter_actor_set_clip ()</title>
<indexterm zone="clutter-actor-set-clip"><primary>clutter_actor_set_clip</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_clip              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> xoff,
                                                         <link linkend="gint">gint</link> yoff,
                                                         <link linkend="gint">gint</link> width,
                                                         <link linkend="gint">gint</link> height);</programlisting>
<para>
Sets clip area in pixels for <parameter>self</parameter>. The clip area is always computed
from the upper left corner of the actor, even if the anchor point is
set otherwise.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>xoff</parameter>&nbsp;:</term>
<listitem><simpara> X offset of the clip rectangle, in pixels
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>yoff</parameter>&nbsp;:</term>
<listitem><simpara> Y offset of the clip rectangle, in pixels
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> Width of the clip rectangle, in pixels
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> Height of the clip rectangle, in pixels
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-remove-clip" role="function">
<title>clutter_actor_remove_clip ()</title>
<indexterm zone="clutter-actor-remove-clip"><primary>clutter_actor_remove_clip</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_remove_clip           (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Removes clip area from <parameter>self</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-has-clip" role="function" condition="since:0.1.1">
<title>clutter_actor_has_clip ()</title>
<indexterm zone="clutter-actor-has-clip" role="0.1.1"><primary>clutter_actor_has_clip</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            clutter_actor_has_clip              (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Determines whether the actor has a clip area set or not.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the actor has a clip area set.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.1.1
</para></refsect2>
<refsect2 id="clutter-actor-get-clip" role="function" condition="since:0.6">
<title>clutter_actor_get_clip ()</title>
<indexterm zone="clutter-actor-get-clip" role="0.6"><primary>clutter_actor_get_clip</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_clip              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> *xoff,
                                                         <link linkend="gint">gint</link> *yoff,
                                                         <link linkend="gint">gint</link> *width,
                                                         <link linkend="gint">gint</link> *height);</programlisting>
<para>
Gets the clip area for <parameter>self</parameter>, in pixels.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>xoff</parameter>&nbsp;:</term>
<listitem><simpara> return location for the X offset of the clip rectangle, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>yoff</parameter>&nbsp;:</term>
<listitem><simpara> return location for the Y offset of the clip rectangle, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> return location for the width of the clip rectangle, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> return location for the height of the clip rectangle, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-parent" role="function">
<title>clutter_actor_set_parent ()</title>
<indexterm zone="clutter-actor-set-parent"><primary>clutter_actor_set_parent</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_parent            (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterActor">ClutterActor</link> *parent);</programlisting>
<para>
Sets the parent of <parameter>self</parameter> to <parameter>parent</parameter>.  The opposite function is
<link linkend="clutter-actor-unparent"><function>clutter_actor_unparent()</function></link>.
</para>
<para>
This function should not be used by applications, but by custom
container actor subclasses.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> A new <link linkend="ClutterActor"><type>ClutterActor</type></link> parent
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-get-parent" role="function">
<title>clutter_actor_get_parent ()</title>
<indexterm zone="clutter-actor-get-parent"><primary>clutter_actor_get_parent</primary></indexterm><programlisting><link linkend="ClutterActor">ClutterActor</link>*       clutter_actor_get_parent            (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the parent of <parameter>self</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The <link linkend="ClutterActor"><type>ClutterActor</type></link> parent, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no parent is set
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-reparent" role="function" condition="since:0.2">
<title>clutter_actor_reparent ()</title>
<indexterm zone="clutter-actor-reparent" role="0.2"><primary>clutter_actor_reparent</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_reparent              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterActor">ClutterActor</link> *new_parent);</programlisting>
<para>
This function resets the parent actor of <parameter>self</parameter>.  It is
logically equivalent to calling <link linkend="clutter-actor-unparent"><function>clutter_actor_unparent()</function></link>
and <link linkend="clutter-actor-set-parent"><function>clutter_actor_set_parent()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_parent</parameter>&nbsp;:</term>
<listitem><simpara> the new <link linkend="ClutterActor"><type>ClutterActor</type></link> parent
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.2
</para></refsect2>
<refsect2 id="clutter-actor-unparent" role="function" condition="since:0.1.1">
<title>clutter_actor_unparent ()</title>
<indexterm zone="clutter-actor-unparent" role="0.1.1"><primary>clutter_actor_unparent</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_unparent              (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Removes the parent of <parameter>self</parameter>.
</para>
<para>
This function should not be used in applications.  It should be called by
implementations of container actors, to dissociate a child from the
container.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.1.1
</para></refsect2>
<refsect2 id="clutter-actor-raise" role="function">
<title>clutter_actor_raise ()</title>
<indexterm zone="clutter-actor-raise"><primary>clutter_actor_raise</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_raise                 (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterActor">ClutterActor</link> *below);</programlisting>
<para>
Puts <parameter>self</parameter> above <parameter>below</parameter>.
</para>
<para>
Both actors must have the same parent.
</para>
<para>
This function is the equivalent of <link linkend="clutter-container-raise-child"><function>clutter_container_raise_child()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>below</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link> to raise above.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-lower" role="function">
<title>clutter_actor_lower ()</title>
<indexterm zone="clutter-actor-lower"><primary>clutter_actor_lower</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_lower                 (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterActor">ClutterActor</link> *above);</programlisting>
<para>
Puts <parameter>self</parameter> below <parameter>above</parameter>.
</para>
<para>
Both actors must have the same parent.
</para>
<para>
This function is the equivalent of <link linkend="clutter-container-lower-child"><function>clutter_container_lower_child()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>above</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link> to lower below
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-raise-top" role="function">
<title>clutter_actor_raise_top ()</title>
<indexterm zone="clutter-actor-raise-top"><primary>clutter_actor_raise_top</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_raise_top             (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Raises <parameter>self</parameter> to the top.
</para>
<para>
This function calls <link linkend="clutter-actor-raise"><function>clutter_actor_raise()</function></link> internally.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-lower-bottom" role="function">
<title>clutter_actor_lower_bottom ()</title>
<indexterm zone="clutter-actor-lower-bottom"><primary>clutter_actor_lower_bottom</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_lower_bottom          (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Lowers <parameter>self</parameter> to the bottom.
</para>
<para>
This function calls <link linkend="clutter-actor-lower"><function>clutter_actor_lower()</function></link> internally.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-get-stage" role="function" condition="since:0.8">
<title>clutter_actor_get_stage ()</title>
<indexterm zone="clutter-actor-get-stage" role="0.8"><primary>clutter_actor_get_stage</primary></indexterm><programlisting><link linkend="ClutterActor">ClutterActor</link>*       clutter_actor_get_stage             (<link linkend="ClutterActor">ClutterActor</link> *actor);</programlisting>
<para>
Retrieves the <link linkend="ClutterStage"><type>ClutterStage</type></link> where <parameter>actor</parameter> is contained.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the stage containing the actor, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-set-depth" role="function">
<title>clutter_actor_set_depth ()</title>
<indexterm zone="clutter-actor-set-depth"><primary>clutter_actor_set_depth</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_depth             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> depth);</programlisting>
<para>
Sets the Z co-ordinate of <parameter>self</parameter> to <parameter>depth</parameter>. The Units of which are dependant
on the perspective setup.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>depth</parameter>&nbsp;:</term>
<listitem><simpara> Z co-ord
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-get-depth" role="function">
<title>clutter_actor_get_depth ()</title>
<indexterm zone="clutter-actor-get-depth"><primary>clutter_actor_get_depth</primary></indexterm><programlisting><link linkend="gint">gint</link>                clutter_actor_get_depth             (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the depth of <parameter>self</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the depth of the actor
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-set-scale" role="function" condition="since:0.2">
<title>clutter_actor_set_scale ()</title>
<indexterm zone="clutter-actor-set-scale" role="0.2"><primary>clutter_actor_set_scale</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_scale             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gdouble">gdouble</link> scale_x,
                                                         <link linkend="gdouble">gdouble</link> scale_y);</programlisting>
<para>
Scales an actor with the given factors. The scaling is always
relative to the anchor point.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scale_x</parameter>&nbsp;:</term>
<listitem><simpara> double factor to scale actor by horizontally.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scale_y</parameter>&nbsp;:</term>
<listitem><simpara> double factor to scale actor by vertically.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.2
</para></refsect2>
<refsect2 id="clutter-actor-get-scale" role="function" condition="since:0.2">
<title>clutter_actor_get_scale ()</title>
<indexterm zone="clutter-actor-get-scale" role="0.2"><primary>clutter_actor_get_scale</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_scale             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gdouble">gdouble</link> *scale_x,
                                                         <link linkend="gdouble">gdouble</link> *scale_y);</programlisting>
<para>
Retrieves an actors scale in floating point.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scale_x</parameter>&nbsp;:</term>
<listitem><simpara> Location to store horizonal float scale factor, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scale_y</parameter>&nbsp;:</term>
<listitem><simpara> Location to store vertical float scale factor, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.2
</para></refsect2>
<refsect2 id="clutter-actor-is-scaled" role="function" condition="since:0.6">
<title>clutter_actor_is_scaled ()</title>
<indexterm zone="clutter-actor-is-scaled" role="0.6"><primary>clutter_actor_is_scaled</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            clutter_actor_is_scaled             (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Checks whether the actor is scaled in either dimension.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the actor is scaled.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-apply-transform-to-point" role="function" condition="since:0.4">
<title>clutter_actor_apply_transform_to_point ()</title>
<indexterm zone="clutter-actor-apply-transform-to-point" role="0.4"><primary>clutter_actor_apply_transform_to_point</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_apply_transform_to_point
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterVertex">ClutterVertex</link> *point,
                                                         <link linkend="ClutterVertex">ClutterVertex</link> *vertex);</programlisting>
<para>
Transforms <parameter>point</parameter> in coordinates relative to the actor
into screen-relative coordinates with the current actor
transformation (i.e. scale, rotation, etc)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>point</parameter>&nbsp;:</term>
<listitem><simpara> A point as <link linkend="ClutterVertex"><type>ClutterVertex</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>vertex</parameter>&nbsp;:</term>
<listitem><simpara> The translated <link linkend="ClutterVertex"><type>ClutterVertex</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.4
</para></refsect2>
<refsect2 id="clutter-actor-transform-stage-point" role="function" condition="since:0.6">
<title>clutter_actor_transform_stage_point ()</title>
<indexterm zone="clutter-actor-transform-stage-point" role="0.6"><primary>clutter_actor_transform_stage_point</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            clutter_actor_transform_stage_point (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> y,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *x_out,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *y_out);</programlisting>
<para>
This function translates screen coordinates (<parameter>x</parameter>, <parameter>y</parameter>) to
coordinates relative to the actor. For example, it can be used to translate
screen events from global screen coordinates into actor-local coordinates.
</para>
<para>
The conversion can fail, notably if the transform stack results in the
actor being projected on the screen as a mere line.
</para>
<para>
The conversion should not be expected to be pixel-perfect due to the
nature of the operation. In general the error grows when the skewing
of the actor rectangle on screen increases.
</para>
<para>
Note: This function is fairly computationally intensive.
</para>
<para>
Note: This function only works when the allocation is up-to-date, i.e. inside of <link linkend="paint"><function>paint()</function></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> x screen coordinate of the point to unproject, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> y screen coordinate of the point to unproject, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x_out</parameter>&nbsp;:</term>
<listitem><simpara> return location for the unprojected x coordinance, in
  <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_out</parameter>&nbsp;:</term>
<listitem><simpara> return location for the unprojected y coordinance, in
  <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if conversion was successful.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-apply-relative-transform-to-point" role="function" condition="since:0.6">
<title>clutter_actor_apply_relative_transform_to_point ()</title>
<indexterm zone="clutter-actor-apply-relative-transform-to-point" role="0.6"><primary>clutter_actor_apply_relative_transform_to_point</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_apply_relative_transform_to_point
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterActor">ClutterActor</link> *ancestor,
                                                         <link linkend="ClutterVertex">ClutterVertex</link> *point,
                                                         <link linkend="ClutterVertex">ClutterVertex</link> *vertex);</programlisting>
<para>
Transforms <parameter>point</parameter> in coordinates relative to the actor into
ancestor-relative coordinates using the relevant transform
stack (i.e. scale, rotation, etc).
</para>
<para>
If <parameter>ancestor</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link> the ancestor will be the <link linkend="ClutterStage"><type>ClutterStage</type></link>. In
this case, the coordinates returned will be the coordinates on
the stage before the projection is applied. This is different from
the behaviour of <link linkend="clutter-actor-apply-transform-to-point"><function>clutter_actor_apply_transform_to_point()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ancestor</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link> ancestor, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to use the
  default <link linkend="ClutterStage"><type>ClutterStage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>point</parameter>&nbsp;:</term>
<listitem><simpara> A point as <link linkend="ClutterVertex"><type>ClutterVertex</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>vertex</parameter>&nbsp;:</term>
<listitem><simpara> The translated <link linkend="ClutterVertex"><type>ClutterVertex</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-transformed-position" role="function" condition="since:0.8">
<title>clutter_actor_get_transformed_position ()</title>
<indexterm zone="clutter-actor-get-transformed-position" role="0.8"><primary>clutter_actor_get_transformed_position</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_transformed_position
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> *x,
                                                         <link linkend="gint">gint</link> *y);</programlisting>
<para>
Gets the absolute position of an actor, in pixels, relative
to the stage.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> return location for the X coordinate, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> return location for the Y coordinate, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-get-transformed-size" role="function" condition="since:0.8">
<title>clutter_actor_get_transformed_size ()</title>
<indexterm zone="clutter-actor-get-transformed-size" role="0.8"><primary>clutter_actor_get_transformed_size</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_transformed_size  (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="guint">guint</link> *width,
                                                         <link linkend="guint">guint</link> *height);</programlisting>
<para>
Gets the absolute size of an actor taking into account
any scaling factors</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> return location for the width, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> return location for the height, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-get-paint-opacity" role="function" condition="since:0.8">
<title>clutter_actor_get_paint_opacity ()</title>
<indexterm zone="clutter-actor-get-paint-opacity" role="0.8"><primary>clutter_actor_get_paint_opacity</primary></indexterm><programlisting><link linkend="guint8">guint8</link>              clutter_actor_get_paint_opacity     (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the absolute opacity of the actor, as it appears on the stage.
</para>
<para>
This function traverses the hierarchy chain and composites the opacity of
the actor with that of its parents.
</para>
<para>
This function is intended for subclasses to use in the paint virtual
function, to paint themselves with the correct opacity.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The actor opacity value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-get-abs-allocation-vertices" role="function" condition="since:0.4">
<title>clutter_actor_get_abs_allocation_vertices ()</title>
<indexterm zone="clutter-actor-get-abs-allocation-vertices" role="0.4"><primary>clutter_actor_get_abs_allocation_vertices</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_abs_allocation_vertices
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterVertex">ClutterVertex</link> verts[4]);</programlisting>
<para>
Calculates the transformed screen coordinates of the four corners of
the actor; the returned vertices relate to the <link linkend="ClutterActorBox"><type>ClutterActorBox</type></link>
coordinates  as follows:
<itemizedlist>
  <listitem><para>v[0] contains (x1, y1)</para></listitem>
  <listitem><para>v[1] contains (x2, y1)</para></listitem>
  <listitem><para>v[2] contains (x1, y2)</para></listitem>
  <listitem><para>v[3] contains (x2, y2)</para></listitem>
</itemizedlist></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>verts</parameter>&nbsp;:</term>
<listitem><simpara> Pointer to a location of an array of 4 <link linkend="ClutterVertex"><type>ClutterVertex</type></link> where to
store the result.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.4
</para></refsect2>
<refsect2 id="ClutterVertex" role="struct" condition="since:0.4">
<title>ClutterVertex</title>
<indexterm zone="ClutterVertex" role="0.4"><primary>ClutterVertex</primary></indexterm><programlisting>typedef struct {
  ClutterUnit x;
  ClutterUnit y;
  ClutterUnit z;
} ClutterVertex;
</programlisting>
<para>
Vertex of an actor in 3D space, expressed in device independent units.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="ClutterUnit">ClutterUnit</link>&nbsp;<structfield>x</structfield>;</term>
<listitem><simpara> X coordinate of the vertex
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="ClutterUnit">ClutterUnit</link>&nbsp;<structfield>y</structfield>;</term>
<listitem><simpara> Y coordinate of the vertex
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="ClutterUnit">ClutterUnit</link>&nbsp;<structfield>z</structfield>;</term>
<listitem><simpara> Z coordinate of the vertex
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.4
</para></refsect2>
<refsect2 id="clutter-actor-box-get-from-vertices" role="function" condition="since:0.6">
<title>clutter_actor_box_get_from_vertices ()</title>
<indexterm zone="clutter-actor-box-get-from-vertices" role="0.6"><primary>clutter_actor_box_get_from_vertices</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_box_get_from_vertices (<link linkend="ClutterVertex">ClutterVertex</link> vtx[4],
                                                         <link linkend="ClutterActorBox">ClutterActorBox</link> *box);</programlisting>
<para>
Calculates the bounding box represented by the four vertices; for details
of the vertex array see <link linkend="clutter-actor-get-abs-allocation-vertices"><function>clutter_actor_get_abs_allocation_vertices()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>vtx</parameter>&nbsp;:</term>
<listitem><simpara> array of four <link linkend="ClutterVertex"><type>ClutterVertex</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>box</parameter>&nbsp;:</term>
<listitem><simpara> return location for a <link linkend="ClutterActorBox"><type>ClutterActorBox</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-anchor-point" role="function" condition="since:0.6">
<title>clutter_actor_set_anchor_point ()</title>
<indexterm zone="clutter-actor-set-anchor-point" role="0.6"><primary>clutter_actor_set_anchor_point</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_anchor_point      (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> anchor_x,
                                                         <link linkend="gint">gint</link> anchor_y);</programlisting>
<para>
Sets an anchor point for the <parameter>actor</parameter>. The anchor point is a point in the
coordinate space of an actor to which the actor position within its
parent is relative; the default is (0, 0), i.e. the top-left corner of
the actor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anchor_x</parameter>&nbsp;:</term>
<listitem><simpara> X coordinate of the anchor point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anchor_y</parameter>&nbsp;:</term>
<listitem><simpara> Y coordinate of the anchor point
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-anchor-point" role="function" condition="since:0.6">
<title>clutter_actor_get_anchor_point ()</title>
<indexterm zone="clutter-actor-get-anchor-point" role="0.6"><primary>clutter_actor_get_anchor_point</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_anchor_point      (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> *anchor_x,
                                                         <link linkend="gint">gint</link> *anchor_y);</programlisting>
<para>
Gets the current anchor point of the <parameter>actor</parameter> in pixels.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anchor_x</parameter>&nbsp;:</term>
<listitem><simpara> return location for the X coordinate of the anchor point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anchor_y</parameter>&nbsp;:</term>
<listitem><simpara> return location for the y coordinate of the anchor point
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-anchor-point-from-gravity" role="function" condition="since:0.6">
<title>clutter_actor_set_anchor_point_from_gravity ()</title>
<indexterm zone="clutter-actor-set-anchor-point-from-gravity" role="0.6"><primary>clutter_actor_set_anchor_point_from_gravity</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_anchor_point_from_gravity
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterGravity">ClutterGravity</link> gravity);</programlisting>
<para>
Sets an anchor point on the actor, based on the given gravity (this is a
convenience function wrapping <link linkend="clutter-actor-set-anchor-point"><function>clutter_actor_set_anchor_point()</function></link>).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>gravity</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="ClutterGravity"><type>ClutterGravity</type></link>.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-move-anchor-point" role="function" condition="since:0.6">
<title>clutter_actor_move_anchor_point ()</title>
<indexterm zone="clutter-actor-move-anchor-point" role="0.6"><primary>clutter_actor_move_anchor_point</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_move_anchor_point     (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="gint">gint</link> anchor_x,
                                                         <link linkend="gint">gint</link> anchor_y);</programlisting>
<para>
Sets an anchor point for the <parameter>actor</parameter>, and adjusts the actor postion so
that the relative position of the actor toward its parent remains the
same.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anchor_x</parameter>&nbsp;:</term>
<listitem><simpara> X coordinate of the anchor point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anchor_y</parameter>&nbsp;:</term>
<listitem><simpara> Y coordinate of the anchor point
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-move-anchor-point-from-gravity" role="function" condition="since:0.6">
<title>clutter_actor_move_anchor_point_from_gravity ()</title>
<indexterm zone="clutter-actor-move-anchor-point-from-gravity" role="0.6"><primary>clutter_actor_move_anchor_point_from_gravity</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_move_anchor_point_from_gravity
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterGravity">ClutterGravity</link> gravity);</programlisting>
<para>
Sets an anchor point on the actor based on the given gravity, adjusting the
actor postion so that its relative position within its parent remains
unchanged.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>gravity</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="ClutterGravity"><type>ClutterGravity</type></link>.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-reactive" role="function" condition="since:0.6">
<title>clutter_actor_set_reactive ()</title>
<indexterm zone="clutter-actor-set-reactive" role="0.6"><primary>clutter_actor_set_reactive</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_reactive          (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                         <link linkend="gboolean">gboolean</link> reactive);</programlisting>
<para>
Sets <parameter>actor</parameter> as reactive. Reactive actors will receive events.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reactive</parameter>&nbsp;:</term>
<listitem><simpara> whether the actor should be reactive to events
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-reactive" role="function" condition="since:0.6">
<title>clutter_actor_get_reactive ()</title>
<indexterm zone="clutter-actor-get-reactive" role="0.6"><primary>clutter_actor_get_reactive</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            clutter_actor_get_reactive          (<link linkend="ClutterActor">ClutterActor</link> *actor);</programlisting>
<para>
Checks whether <parameter>actor</parameter> is marked as reactive.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the actor is reactive

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-shader" role="function" condition="since:0.6">
<title>clutter_actor_set_shader ()</title>
<indexterm zone="clutter-actor-set-shader" role="0.6"><primary>clutter_actor_set_shader</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            clutter_actor_set_shader            (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterShader">ClutterShader</link> *shader);</programlisting>
<para>
Sets the <link linkend="ClutterShader"><type>ClutterShader</type></link> to be used when rendering <parameter>self</parameter>.
If <parameter>shader</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link> it will unset any currently set shader
for the actor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>shader</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterShader"><type>ClutterShader</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> to unset the shader.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the shader was successfully applied

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-shader" role="function" condition="since:0.6">
<title>clutter_actor_get_shader ()</title>
<indexterm zone="clutter-actor-get-shader" role="0.6"><primary>clutter_actor_get_shader</primary></indexterm><programlisting><link linkend="ClutterShader">ClutterShader</link>*      clutter_actor_get_shader            (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Queries the currently set <link linkend="ClutterShader"><type>ClutterShader</type></link> on <parameter>self</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The currently set <link linkend="ClutterShader"><type>ClutterShader</type></link> or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no
  shader is set.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-shader-param" role="function" condition="since:0.6">
<title>clutter_actor_set_shader_param ()</title>
<indexterm zone="clutter-actor-set-shader-param" role="0.6"><primary>clutter_actor_set_shader_param</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_shader_param      (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         const <link linkend="gchar">gchar</link> *param,
                                                         <link linkend="gfloat">gfloat</link> value);</programlisting>
<para>
Sets the value for a named parameter of the shader applied
to <parameter>actor</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>param</parameter>&nbsp;:</term>
<listitem><simpara> the name of the parameter
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> the value of the parameter
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-depthu" role="function">
<title>clutter_actor_set_depthu ()</title>
<indexterm zone="clutter-actor-set-depthu"><primary>clutter_actor_set_depthu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_depthu            (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> depth);</programlisting>
<para>
Sets the Z co-ordinate of <parameter>self</parameter> to <parameter>depth</parameter> in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s, the
units of which are dependant on the perspective setup.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>depth</parameter>&nbsp;:</term>
<listitem><simpara> Z co-ordinate, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-get-depthu" role="function" condition="since:0.6">
<title>clutter_actor_get_depthu ()</title>
<indexterm zone="clutter-actor-get-depthu" role="0.6"><primary>clutter_actor_get_depthu</primary></indexterm><programlisting><link linkend="ClutterUnit">ClutterUnit</link>         clutter_actor_get_depthu            (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the depth of <parameter>self</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the depth of the actor, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-heightu" role="function" condition="since:0.6">
<title>clutter_actor_set_heightu ()</title>
<indexterm zone="clutter-actor-set-heightu" role="0.6"><primary>clutter_actor_set_heightu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_heightu           (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> height);</programlisting>
<para>
Forces a height on an actor, causing the actor's preferred width
and height (if any) to be ignored.
</para>
<para>
This function sets both the minimum and natural size of the actor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> Requested new height for the actor, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-heightu" role="function" condition="since:0.6">
<title>clutter_actor_get_heightu ()</title>
<indexterm zone="clutter-actor-get-heightu" role="0.6"><primary>clutter_actor_get_heightu</primary></indexterm><programlisting><link linkend="ClutterUnit">ClutterUnit</link>         clutter_actor_get_heightu           (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the height of a <link linkend="ClutterActor"><type>ClutterActor</type></link>, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s.
</para>
<para>
If the actor has a valid allocation, this function will return the
height of the allocated area given to the actor.
</para>
<para>
If the actor does not have a valid allocation, this function will
return the actor's natural height, that is the preferred height of
the actor.
</para>
<para>
If you care whether you get the preferred height or the height that
has been assigned to the actor, you should probably call a different
function like <link linkend="clutter-actor-get-allocation-coords"><function>clutter_actor_get_allocation_coords()</function></link> to retrieve the
allocated size or <link linkend="clutter-actor-get-preferred-height"><function>clutter_actor_get_preferred_height()</function></link> to retrieve the
preferred height.
</para>
<para>
If an actor has a fixed height, for instance a height that has been
assigned using <link linkend="clutter-actor-set-height"><function>clutter_actor_set_height()</function></link>, the height returned will
be the same value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the height of the actor, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-widthu" role="function" condition="since:0.6">
<title>clutter_actor_set_widthu ()</title>
<indexterm zone="clutter-actor-set-widthu" role="0.6"><primary>clutter_actor_set_widthu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_widthu            (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> width);</programlisting>
<para>
Forces a width on an actor, causing the actor's preferred width
and height (if any) to be ignored.
</para>
<para>
This function sets both the minimum and natural size of the actor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> Requested new width for the actor, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-widthu" role="function" condition="since:0.6">
<title>clutter_actor_get_widthu ()</title>
<indexterm zone="clutter-actor-get-widthu" role="0.6"><primary>clutter_actor_get_widthu</primary></indexterm><programlisting><link linkend="ClutterUnit">ClutterUnit</link>         clutter_actor_get_widthu            (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the width of a <link linkend="ClutterActor"><type>ClutterActor</type></link>, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s.
</para>
<para>
If the actor has a valid allocation, this function will return the
width of the allocated area given to the actor.
</para>
<para>
If the actor does not have a valid allocation, this function will
return the actor's natural width, that is the preferred width of
the actor.
</para>
<para>
If you care whether you get the preferred width or the width that
has been assigned to the actor, you should probably call a different
function like <link linkend="clutter-actor-get-allocation-coords"><function>clutter_actor_get_allocation_coords()</function></link> to retrieve the
allocated size or <link linkend="clutter-actor-get-preferred-width"><function>clutter_actor_get_preferred_width()</function></link> to retrieve the
preferred width.
</para>
<para>
If an actor has a fixed width, for instance a width that has been
assigned using <link linkend="clutter-actor-set-width"><function>clutter_actor_set_width()</function></link>, the width returned will
be the same value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the width of the actor, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-xu" role="function" condition="since:0.6">
<title>clutter_actor_set_xu ()</title>
<indexterm zone="clutter-actor-set-xu" role="0.6"><primary>clutter_actor_set_xu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_xu                (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> x);</programlisting>
<para>
Sets the actor's X coordinate, relative to its parent.
</para>
<para>
Overrides any layout manager and forces a fixed position for
the actor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> the actor's position on the X axis, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-xu" role="function" condition="since:0.6">
<title>clutter_actor_get_xu ()</title>
<indexterm zone="clutter-actor-get-xu" role="0.6"><primary>clutter_actor_get_xu</primary></indexterm><programlisting><link linkend="ClutterUnit">ClutterUnit</link>         clutter_actor_get_xu                (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the X coordinate of a <link linkend="ClutterActor"><type>ClutterActor</type></link>, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s.
</para>
<para>
This function tries to "do what you mean", by returning the
correct value depending on the actor's state.
</para>
<para>
If the actor has a valid allocation, this function will return
the X coordinate of the origin of the allocation box.
</para>
<para>
If the actor has any fixed coordinate set using <link linkend="clutter-actor-set-x"><function>clutter_actor_set_x()</function></link>,
<link linkend="clutter-actor-set-position"><function>clutter_actor_set_position()</function></link> or <link linkend="clutter-actor-set-geometry"><function>clutter_actor_set_geometry()</function></link>, this
function will return that coordinate.
</para>
<para>
If both the allocation and a fixed position are missing, this function
will return 0.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the X coordinate, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s, ignoring
  any transformation (i.e. scaling, rotation)

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-yu" role="function" condition="since:0.6">
<title>clutter_actor_set_yu ()</title>
<indexterm zone="clutter-actor-set-yu" role="0.6"><primary>clutter_actor_set_yu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_yu                (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> y);</programlisting>
<para>
Sets the actor's Y coordinate, relative to its parent.
</para>
<para>
Overrides any layout manager and forces a fixed position for
the actor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> the actor's position on the Y axis, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-yu" role="function" condition="since:0.6">
<title>clutter_actor_get_yu ()</title>
<indexterm zone="clutter-actor-get-yu" role="0.6"><primary>clutter_actor_get_yu</primary></indexterm><programlisting><link linkend="ClutterUnit">ClutterUnit</link>         clutter_actor_get_yu                (<link linkend="ClutterActor">ClutterActor</link> *self);</programlisting>
<para>
Retrieves the Y coordinate of a <link linkend="ClutterActor"><type>ClutterActor</type></link>, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s.
</para>
<para>
This function tries to "do what you mean", by returning the
correct value depending on the actor's state.
</para>
<para>
If the actor has a valid allocation, this function will return
the Y coordinate of the origin of the allocation box.
</para>
<para>
If the actor has any fixed coordinate set using <link linkend="clutter-actor-set-y"><function>clutter_actor_set_y()</function></link>,
<link linkend="clutter-actor-set-position"><function>clutter_actor_set_position()</function></link> or <link linkend="clutter-actor-set-geometry"><function>clutter_actor_set_geometry()</function></link>, this
function will return that coordinate.
</para>
<para>
If both the allocation and a fixed position are missing, this function
will return 0.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the Y coordinate, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s, ignoring
  any transformation (i.e. scaling, rotation)

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-positionu" role="function" condition="since:0.6">
<title>clutter_actor_set_positionu ()</title>
<indexterm zone="clutter-actor-set-positionu" role="0.6"><primary>clutter_actor_set_positionu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_positionu         (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> y);</programlisting>
<para>
Sets the actor's position in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s relative to any
parent actor.
</para>
<para>
If a layout manager is in use, this position will override the
layout manager and force a fixed position.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> New left position of actor in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> New top position of actor in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-positionu" role="function" condition="since:0.6">
<title>clutter_actor_get_positionu ()</title>
<indexterm zone="clutter-actor-get-positionu" role="0.6"><primary>clutter_actor_get_positionu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_positionu         (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *y);</programlisting>
<para>
This function tries to "do what you mean" and tell you where the
actor is, prior to any transformations. Retrieves the fixed
position of an actor in pixels, if one has been set; otherwise, if
the allocation is valid, returns the actor's allocated position;
otherwise, returns 0,0.
</para>
<para>
The returned position is in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> return location for the X coordinate, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> return location for the Y coordinate, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-sizeu" role="function" condition="since:0.6">
<title>clutter_actor_set_sizeu ()</title>
<indexterm zone="clutter-actor-set-sizeu" role="0.6"><primary>clutter_actor_set_sizeu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_sizeu             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> width,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> height);</programlisting>
<para>
Overrides the actor's size request in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s. If <parameter>width</parameter>
and/or <parameter>height</parameter> are -1 the actor will use its normal size request (the
override is removed).
</para>
<para>
This function sets or unsets both the minimum and natural size.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> New width of actor in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s, or -1
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> New height of actor in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s, or -1
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-sizeu" role="function" condition="since:0.6">
<title>clutter_actor_get_sizeu ()</title>
<indexterm zone="clutter-actor-get-sizeu" role="0.6"><primary>clutter_actor_get_sizeu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_sizeu             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *width,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *height);</programlisting>
<para>
This function tries to "do what you mean" and return
the size an actor will have. If the actor has a valid
allocation, the allocation will be returned; otherwise,
the actors natural size request will be returned.
</para>
<para>
If you care whether you get the request vs. the allocation, you
should probably call a different function like
<link linkend="clutter-actor-get-allocation-coords"><function>clutter_actor_get_allocation_coords()</function></link> or
<link linkend="clutter-actor-get-preferred-width"><function>clutter_actor_get_preferred_width()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> return location for the width, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> return location for the height, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-anchor-pointu" role="function" condition="since:0.6">
<title>clutter_actor_set_anchor_pointu ()</title>
<indexterm zone="clutter-actor-set-anchor-pointu" role="0.6"><primary>clutter_actor_set_anchor_pointu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_anchor_pointu     (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> anchor_x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> anchor_y);</programlisting>
<para>
Sets an anchor point for <parameter>self</parameter>. The anchor point is a point in the
coordinate space of an actor to which the actor position within its
parent is relative; the default is (0, 0), i.e. the top-left corner
of the actor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anchor_x</parameter>&nbsp;:</term>
<listitem><simpara> X coordinate of the anchor point, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anchor_y</parameter>&nbsp;:</term>
<listitem><simpara> Y coordinate of the anchor point, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-anchor-pointu" role="function" condition="since:0.6">
<title>clutter_actor_get_anchor_pointu ()</title>
<indexterm zone="clutter-actor-get-anchor-pointu" role="0.6"><primary>clutter_actor_get_anchor_pointu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_anchor_pointu     (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *anchor_x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *anchor_y);</programlisting>
<para>
Gets the current anchor point of the <parameter>actor</parameter> in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anchor_x</parameter>&nbsp;:</term>
<listitem><simpara> return location for the X coordinace of the anchor point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anchor_y</parameter>&nbsp;:</term>
<listitem><simpara> return location for the X coordinace of the anchor point
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-move-anchor-pointu" role="function" condition="since:0.6">
<title>clutter_actor_move_anchor_pointu ()</title>
<indexterm zone="clutter-actor-move-anchor-pointu" role="0.6"><primary>clutter_actor_move_anchor_pointu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_move_anchor_pointu    (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> anchor_x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> anchor_y);</programlisting>
<para>
Sets an anchor point for the actor, and adjusts the actor postion so that
the relative position of the actor toward its parent remains the same.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anchor_x</parameter>&nbsp;:</term>
<listitem><simpara> X coordinate of the anchor point
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>anchor_y</parameter>&nbsp;:</term>
<listitem><simpara> Y coordinate of the anchor point
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-clipu" role="function" condition="since:0.6">
<title>clutter_actor_set_clipu ()</title>
<indexterm zone="clutter-actor-set-clipu" role="0.6"><primary>clutter_actor_set_clipu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_clipu             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> xoff,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> yoff,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> width,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> height);</programlisting>
<para>
Unit-based variant of <link linkend="clutter-actor-set-clip"><function>clutter_actor_set_clip()</function></link>
</para>
<para>
Sets clip area for <parameter>self</parameter>. The clip area is always computed from the
upper left corner of the actor, even if the anchor point is set
otherwise.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>xoff</parameter>&nbsp;:</term>
<listitem><simpara> X offset of the clip rectangle, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>yoff</parameter>&nbsp;:</term>
<listitem><simpara> Y offset of the clip rectangle, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> Width of the clip rectangle, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> Height of the clip rectangle, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-clipu" role="function" condition="since:0.6">
<title>clutter_actor_get_clipu ()</title>
<indexterm zone="clutter-actor-get-clipu" role="0.6"><primary>clutter_actor_get_clipu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_clipu             (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *xoff,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *yoff,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *width,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *height);</programlisting>
<para>
Unit-based variant of <link linkend="clutter-actor-get-clip"><function>clutter_actor_get_clip()</function></link>.
</para>
<para>
Gets the clip area for <parameter>self</parameter>, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>xoff</parameter>&nbsp;:</term>
<listitem><simpara> return location for the X offset of the clip rectangle, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>yoff</parameter>&nbsp;:</term>
<listitem><simpara> return location for the Y offset of the clip rectangle, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> return location for the width of the clip rectangle, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> return location for the height of the clip rectangle, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-set-rotationu" role="function" condition="since:0.8">
<title>clutter_actor_set_rotationu ()</title>
<indexterm zone="clutter-actor-set-rotationu" role="0.8"><primary>clutter_actor_set_rotationu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_rotationu         (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterRotateAxis">ClutterRotateAxis</link> axis,
                                                         <link linkend="gdouble">gdouble</link> angle,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> y,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> z);</programlisting>
<para>
Sets the rotation angle of <parameter>self</parameter> around the given axis.
</para>
<para>
This function is the units based variant of <link linkend="clutter-actor-set-rotation"><function>clutter_actor_set_rotation()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>axis</parameter>&nbsp;:</term>
<listitem><simpara> the axis of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>angle</parameter>&nbsp;:</term>
<listitem><simpara> the angle of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> X coordinate of the rotation center, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> Y coordinate of the rotation center, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>z</parameter>&nbsp;:</term>
<listitem><simpara> Z coordinate of the rotation center, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-get-rotationu" role="function" condition="since:0.8">
<title>clutter_actor_get_rotationu ()</title>
<indexterm zone="clutter-actor-get-rotationu" role="0.8"><primary>clutter_actor_get_rotationu</primary></indexterm><programlisting><link linkend="gdouble">gdouble</link>             clutter_actor_get_rotationu         (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterRotateAxis">ClutterRotateAxis</link> axis,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *y,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *z);</programlisting>
<para>
Retrieves the angle and center of rotation on the given axis,
set using <link linkend="clutter-actor-set-rotation"><function>clutter_actor_set_rotation()</function></link>.
</para>
<para>
This function is the units based variant of <link linkend="clutter-actor-get-rotation"><function>clutter_actor_get_rotation()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>axis</parameter>&nbsp;:</term>
<listitem><simpara> the axis of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> return value for the X coordinate of the center of rotation,
  in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> return value for the Y coordinate of the center of rotation,
  in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>z</parameter>&nbsp;:</term>
<listitem><simpara> return value for the Z coordinate of the center of rotation,
  in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the angle of rotation

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-move-byu" role="function" condition="since:0.6">
<title>clutter_actor_move_byu ()</title>
<indexterm zone="clutter-actor-move-byu" role="0.6"><primary>clutter_actor_move_byu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_move_byu              (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> dx,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> dy);</programlisting>
<para>
Moves an actor by the specified distance relative to its current
position.
</para>
<para>
The move is accomplished by setting a fixed position, overriding
any layout manager, see <link linkend="clutter-actor-set-positionu"><function>clutter_actor_set_positionu()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dx</parameter>&nbsp;:</term>
<listitem><simpara> Distance to move Actor on X axis, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dy</parameter>&nbsp;:</term>
<listitem><simpara> Distance to move Actor on Y axis, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-transformed-positionu" role="function" condition="since:0.8">
<title>clutter_actor_get_transformed_positionu ()</title>
<indexterm zone="clutter-actor-get-transformed-positionu" role="0.8"><primary>clutter_actor_get_transformed_positionu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_transformed_positionu
                                                        (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *x,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *y);</programlisting>
<para>
Gets the absolute position of an actor, in <link linkend="ClutterUnit"><type>ClutterUnit</type></link><!-- -->s,
relative to the stage.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> return location for the X coordinate, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> return location for the Y coordinate, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-get-transformed-sizeu" role="function" condition="since:0.8">
<title>clutter_actor_get_transformed_sizeu ()</title>
<indexterm zone="clutter-actor-get-transformed-sizeu" role="0.8"><primary>clutter_actor_get_transformed_sizeu</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_transformed_sizeu (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *width,
                                                         <link linkend="ClutterUnit">ClutterUnit</link> *height);</programlisting>
<para>
Gets the absolute size of an actor in <link linkend="ClutterUnits"><type>ClutterUnits</type></link><!-- -->s, taking
into account the scaling factors.
</para>
<para>
If the actor has a valid allocation, the allocated size will be used.
If the actor has not a valid allocation then the preferred size will
be transformed and returned.
</para>
<para>
If you want the transformed allocation, see
<link linkend="clutter-actor-get-abs-allocation-vertices"><function>clutter_actor_get_abs_allocation_vertices()</function></link> instead.
</para>
<para>
<note>When the actor (or one of its ancestors) is rotated around the
X or Y axis, it no longer appears as on the stage as a rectangle, but
as a generic quadrangle; in that case this function returns the size
of the smallest rectangle that encapsulates the entire quad. Please
note that in this case no assumptions can be made about the relative
position of this envelope to the absolute position of the actor, as
returned by <link linkend="clutter-actor-get-transformed-position"><function>clutter_actor_get_transformed_position()</function></link>; if you need this
information, you need to use <link linkend="clutter-actor-get-abs-allocation-vertices"><function>clutter_actor_get_abs_allocation_vertices()</function></link>
to get the coords of the actual quadrangle.</note></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> return location for the width, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> return location for the height, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.8
</para></refsect2>
<refsect2 id="clutter-actor-set-scalex" role="function">
<title>clutter_actor_set_scalex ()</title>
<indexterm zone="clutter-actor-set-scalex"><primary>clutter_actor_set_scalex</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_scalex            (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterFixed">ClutterFixed</link> scale_x,
                                                         <link linkend="ClutterFixed">ClutterFixed</link> scale_y);</programlisting>
<para>
Fixed point version of <link linkend="clutter-actor-set-scale"><function>clutter_actor_set_scale()</function></link>.
</para>
<para>
Scales an actor with the given factors. The scaling is always
relative to the anchor point.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scale_x</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="ClutterFixed"><type>ClutterFixed</type></link> factor to scale actor by horizontally.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scale_y</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="ClutterFixed"><type>ClutterFixed</type></link> factor to scale actor by vertically.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="clutter-actor-get-scalex" role="function" condition="since:0.2">
<title>clutter_actor_get_scalex ()</title>
<indexterm zone="clutter-actor-get-scalex" role="0.2"><primary>clutter_actor_get_scalex</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_get_scalex            (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterFixed">ClutterFixed</link> *scale_x,
                                                         <link linkend="ClutterFixed">ClutterFixed</link> *scale_y);</programlisting>
<para>
Fixed point version of <link linkend="clutter-actor-get-scale"><function>clutter_actor_get_scale()</function></link>.
</para>
<para>
Retrieves the scale factors of an actor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> A <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scale_x</parameter>&nbsp;:</term>
<listitem><simpara> Location to store horizonal scale factor, or  <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scale_y</parameter>&nbsp;:</term>
<listitem><simpara> Location to store vertical scale factor, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.2
</para></refsect2>
<refsect2 id="clutter-actor-set-rotationx" role="function" condition="since:0.6">
<title>clutter_actor_set_rotationx ()</title>
<indexterm zone="clutter-actor-set-rotationx" role="0.6"><primary>clutter_actor_set_rotationx</primary></indexterm><programlisting><link linkend="void">void</link>                clutter_actor_set_rotationx         (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterRotateAxis">ClutterRotateAxis</link> axis,
                                                         <link linkend="ClutterFixed">ClutterFixed</link> angle,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y,
                                                         <link linkend="gint">gint</link> z);</programlisting>
<para>
Sets the rotation angle of <parameter>self</parameter> around the given axis.
</para>
<para>
This function is the fixed point variant of <link linkend="clutter-actor-set-rotation"><function>clutter_actor_set_rotation()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>axis</parameter>&nbsp;:</term>
<listitem><simpara> the axis of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>angle</parameter>&nbsp;:</term>
<listitem><simpara> the angle of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> X coordinate of the rotation center
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> Y coordinate of the rotation center
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>z</parameter>&nbsp;:</term>
<listitem><simpara> Z coordinate of the rotation center
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>
<refsect2 id="clutter-actor-get-rotationx" role="function" condition="since:0.6">
<title>clutter_actor_get_rotationx ()</title>
<indexterm zone="clutter-actor-get-rotationx" role="0.6"><primary>clutter_actor_get_rotationx</primary></indexterm><programlisting><link linkend="ClutterFixed">ClutterFixed</link>        clutter_actor_get_rotationx         (<link linkend="ClutterActor">ClutterActor</link> *self,
                                                         <link linkend="ClutterRotateAxis">ClutterRotateAxis</link> axis,
                                                         <link linkend="gint">gint</link> *x,
                                                         <link linkend="gint">gint</link> *y,
                                                         <link linkend="gint">gint</link> *z);</programlisting>
<para>
Retrieves the angle and center of rotation on the given axis,
set using <link linkend="clutter-actor-set-rotation"><function>clutter_actor_set_rotation()</function></link>.
</para>
<para>
This function is the fixed point variant of <link linkend="clutter-actor-get-rotation"><function>clutter_actor_get_rotation()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterActor"><type>ClutterActor</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>axis</parameter>&nbsp;:</term>
<listitem><simpara> the axis of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> return value for the X coordinate of the center of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> return value for the Y coordinate of the center of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>z</parameter>&nbsp;:</term>
<listitem><simpara> return value for the Z coordinate of the center of rotation
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the angle of rotation as a fixed point value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.6
</para></refsect2>

</refsect1>
<refsect1 id="ClutterActor.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="ClutterActor--allocation"><title>The <literal>&quot;allocation&quot;</literal> property</title>
<indexterm zone="ClutterActor--allocation" role="0.8"><primary>ClutterActor:allocation</primary></indexterm><programlisting>  &quot;allocation&quot;               <link linkend="ClutterActorBox">ClutterActorBox</link>*      : Read</programlisting>
<para>
The allocation for the actor, in ClutterUnit<!-- -->s. This is
read-only, but you might monitor this property to know when an
actor moves or resizes.</para>
<para>

</para><para>Since  0.8
</para>
</refsect2>
<refsect2 id="ClutterActor--anchor-x"><title>The <literal>&quot;anchor-x&quot;</literal> property</title>
<indexterm zone="ClutterActor--anchor-x"><primary>ClutterActor:anchor-x</primary></indexterm><programlisting>  &quot;anchor-x&quot;                 <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>X coordinate of the anchor point.</para><para>Allowed values: &gt;= -2147483647</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="ClutterActor--anchor-y"><title>The <literal>&quot;anchor-y&quot;</literal> property</title>
<indexterm zone="ClutterActor--anchor-y"><primary>ClutterActor:anchor-y</primary></indexterm><programlisting>  &quot;anchor-y&quot;                 <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>Y coordinate of the anchor point.</para><para>Allowed values: &gt;= -2147483647</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="ClutterActor--clip"><title>The <literal>&quot;clip&quot;</literal> property</title>
<indexterm zone="ClutterActor--clip"><primary>ClutterActor:clip</primary></indexterm><programlisting>  &quot;clip&quot;                     <link linkend="ClutterGeometry">ClutterGeometry</link>*      : Read / Write</programlisting>
<para>
The clip region for the actor.</para>
<para>

</para></refsect2>
<refsect2 id="ClutterActor--depth"><title>The <literal>&quot;depth&quot;</literal> property</title>
<indexterm zone="ClutterActor--depth" role="0.6"><primary>ClutterActor:depth</primary></indexterm><programlisting>  &quot;depth&quot;                    <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>
Depth of the actor.</para>
<para>

</para><para>Allowed values: &gt;= -2147483647</para>
<para>Default value: 0</para>
<para>Since  0.6
</para>
</refsect2>
<refsect2 id="ClutterActor--fixed-position-set"><title>The <literal>&quot;fixed-position-set&quot;</literal> property</title>
<indexterm zone="ClutterActor--fixed-position-set" role="0.8"><primary>ClutterActor:fixed-position-set</primary></indexterm><programlisting>  &quot;fixed-position-set&quot;       <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
This flag controls whether the fixed-x and fixed-y properties are used.</para>
<para>

</para><para>Default value: FALSE</para>
<para>Since  0.8
</para>
</refsect2>
<refsect2 id="ClutterActor--fixed-x"><title>The <literal>&quot;fixed-x&quot;</literal> property</title>
<indexterm zone="ClutterActor--fixed-x" role="0.8"><primary>ClutterActor:fixed-x</primary></indexterm><programlisting>  &quot;fixed-x&quot;                  <link linkend="ClutterUnit">ClutterUnit</link>           : Read / Write</programlisting>
<para>
The fixed X position of the actor in ClutterUnit<!-- -->s. Writing this
property sets the fixed-position-set property as well, as a side effect.</para>
<para>

</para><para>Since  0.8
</para>
</refsect2>
<refsect2 id="ClutterActor--fixed-y"><title>The <literal>&quot;fixed-y&quot;</literal> property</title>
<indexterm zone="ClutterActor--fixed-y" role="0.8"><primary>ClutterActor:fixed-y</primary></indexterm><programlisting>  &quot;fixed-y&quot;                  <link linkend="ClutterUnit">ClutterUnit</link>           : Read / Write</programlisting>
<para>
The fixed Y position of the actor in ClutterUnit<!-- -->s. Writing
this property sets the fixed-position-set property as well, as a side
effect.</para>
<para>

</para><para>Since  0.8
</para>
</refsect2>
<refsect2 id="ClutterActor--has-clip"><title>The <literal>&quot;has-clip&quot;</literal> property</title>
<indexterm zone="ClutterActor--has-clip"><primary>ClutterActor:has-clip</primary></indexterm><programlisting>  &quot;has-clip&quot;                 <link linkend="gboolean">gboolean</link>              : Read</programlisting>
<para>
Whether the actor has the clip property set or not.</para>
<para>

</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="ClutterActor--height"><title>The <literal>&quot;height&quot;</literal> property</title>
<indexterm zone="ClutterActor--height"><primary>ClutterActor:height</primary></indexterm><programlisting>  &quot;height&quot;                   <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>
Height of the actor (in pixels).  If written, forces the minimum and
natural size request of the actor to the given height. If read, returns
the allocated height if available, otherwise the height request.</para>
<para>

</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="ClutterActor--min-height"><title>The <literal>&quot;min-height&quot;</literal> property</title>
<indexterm zone="ClutterActor--min-height" role="0.8"><primary>ClutterActor:min-height</primary></indexterm><programlisting>  &quot;min-height&quot;               <link linkend="ClutterUnit">ClutterUnit</link>           : Read / Write</programlisting>
<para>
A forced minimum height request for the actor, in
ClutterUnit<!-- -->s. Writing this property sets the min-height-set
property as well, as a side effect. This property overrides the usual
height request of the actor.</para>
<para>

</para><para>Since  0.8
</para>
</refsect2>
<refsect2 id="ClutterActor--min-height-set"><title>The <literal>&quot;min-height-set&quot;</literal> property</title>
<indexterm zone="ClutterActor--min-height-set" role="0.8"><primary>ClutterActor:min-height-set</primary></indexterm><programlisting>  &quot;min-height-set&quot;           <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
This flag controls whether the min-height property is used.</para>
<para>

</para><para>Default value: FALSE</para>
<para>Since  0.8
</para>
</refsect2>
<refsect2 id="ClutterActor--min-width"><title>The <literal>&quot;min-width&quot;</literal> property</title>
<indexterm zone="ClutterActor--min-width" role="0.8"><primary>ClutterActor:min-width</primary></indexterm><programlisting>  &quot;min-width&quot;                <link linkend="ClutterUnit">ClutterUnit</link>           : Read / Write</programlisting>
<para>
A forced minimum width request for the actor, in ClutterUnit<!-- -->s.
Writing this property sets the min-width-set property as well, as a side
effect. This property overrides the usual width request of the actor.</para>
<para>

</para><para>Since  0.8
</para>
</refsect2>
<refsect2 id="ClutterActor--min-width-set"><title>The <literal>&quot;min-width-set&quot;</literal> property</title>
<indexterm zone="ClutterActor--min-width-set" role="0.8"><primary>ClutterActor:min-width-set</primary></indexterm><programlisting>  &quot;min-width-set&quot;            <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
This flag controls whether the min-width property is used.</para>
<para>

</para><para>Default value: FALSE</para>
<para>Since  0.8
</para>
</refsect2>
<refsect2 id="ClutterActor--name"><title>The <literal>&quot;name&quot;</literal> property</title>
<indexterm zone="ClutterActor--name" role="0.2"><primary>ClutterActor:name</primary></indexterm><programlisting>  &quot;name&quot;                     <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>
The name of the actor.</para>
<para>

</para><para>Default value: NULL</para>
<para>Since  0.2
</para>
</refsect2>
<refsect2 id="ClutterActor--natural-height"><title>The <literal>&quot;natural-height&quot;</literal> property</title>
<indexterm zone="ClutterActor--natural-height" role="0.8"><primary>ClutterActor:natural-height</primary></indexterm><programlisting>  &quot;natural-height&quot;           <link linkend="ClutterUnit">ClutterUnit</link>           : Read / Write</programlisting>
<para>
A forced natural height request for the actor, in ClutterUnit<!-- -->s.
Writing this property sets the natural-height-set property as well, as
a side effect. This property overrides the usual height request
of the actor.</para>
<para>

</para><para>Since  0.8
</para>
</refsect2>
<refsect2 id="ClutterActor--natural-height-set"><title>The <literal>&quot;natural-height-set&quot;</literal> property</title>
<indexterm zone="ClutterActor--natural-height-set" role="0.8"><primary>ClutterActor:natural-height-set</primary></indexterm><programlisting>  &quot;natural-height-set&quot;       <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
This flag controls whether the natural-height property is used.</para>
<para>

</para><para>Default value: FALSE</para>
<para>Since  0.8
</para>
</refsect2>
<refsect2 id="ClutterActor--natural-width"><title>The <literal>&quot;natural-width&quot;</literal> property</title>
<indexterm zone="ClutterActor--natural-width" role="0.8"><primary>ClutterActor:natural-width</primary></indexterm><programlisting>  &quot;natural-width&quot;            <link linkend="ClutterUnit">ClutterUnit</link>           : Read / Write</programlisting>
<para>
A forced natural width request for the actor, in ClutterUnit<!-- -->s.
Writing this property sets the natural-width-set property as
well, as a side effect. This property overrides the usual width request
of the actor.</para>
<para>

</para><para>Since  0.8
</para>
</refsect2>
<refsect2 id="ClutterActor--natural-width-set"><title>The <literal>&quot;natural-width-set&quot;</literal> property</title>
<indexterm zone="ClutterActor--natural-width-set" role="0.8"><primary>ClutterActor:natural-width-set</primary></indexterm><programlisting>  &quot;natural-width-set&quot;        <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
This flag controls whether the natural-width property is used.</para>
<para>

</para><para>Default value: FALSE</para>
<para>Since  0.8
</para>
</refsect2>
<refsect2 id="ClutterActor--opacity"><title>The <literal>&quot;opacity&quot;</literal> property</title>
<indexterm zone="ClutterActor--opacity"><primary>ClutterActor:opacity</primary></indexterm><programlisting>  &quot;opacity&quot;                  <link linkend="guchar">guchar</link>                : Read / Write</programlisting>
<para>
Opacity of the actor.</para>
<para>

</para><para>Default value: 255</para>
</refsect2>
<refsect2 id="ClutterActor--reactive"><title>The <literal>&quot;reactive&quot;</literal> property</title>
<indexterm zone="ClutterActor--reactive" role="0.6"><primary>ClutterActor:reactive</primary></indexterm><programlisting>  &quot;reactive&quot;                 <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
Whether the actor is reactive to events or not.</para>
<para>

</para><para>Default value: FALSE</para>
<para>Since  0.6
</para>
</refsect2>
<refsect2 id="ClutterActor--request-mode"><title>The <literal>&quot;request-mode&quot;</literal> property</title>
<indexterm zone="ClutterActor--request-mode" role="0.8"><primary>ClutterActor:request-mode</primary></indexterm><programlisting>  &quot;request-mode&quot;             <link linkend="ClutterRequestMode">ClutterRequestMode</link>    : Read / Write</programlisting>
<para>
Request mode for the <link linkend="ClutterActor"><type>ClutterActor</type></link>. The request mode determines the
type of geometry management used by the actor, either height for width
(the default) or width for height.
</para>
<para>
For actors implementing height for width, the parent container should get
the preferred width first, and then the preferred height for that width.
</para>
<para>
For actors implementing width for height, the parent container should get
the preferred height first, and then the preferred width for that height.
</para>
<para>
For instance:
</para>
<para>
<informalexample><programlisting>
  ClutterRequestMode mode;
  ClutterUnit natural_width, min_width;
  ClutterUnit natural_height, min_height;

  g_object_get (G_OBJECT (child), "request-mode", &amp;mode, NULL);
  if (mode == CLUTTER_REQUEST_HEIGHT_FOR_WIDTH)
    {
      clutter_actor_get_preferred_width (child, -1,
                                         &amp;min_width,
                                         &amp;natural_width);
      clutter_actor_get_preferred_height (child, natural_width,
                                          &amp;min_height,
                                          &amp;natural_height);
    }
  else
    {
      clutter_actor_get_preferred_height (child, -1,
                                          &amp;min_height,
                                          &amp;natural_height);
      clutter_actor_get_preferred_width (child, natural_height,
                                         &amp;min_width,
                                         &amp;natural_width);
    }
</programlisting></informalexample>
</para>
<para>
will retrieve the minimum and natural width and height depending on the
preferred request mode of the <link linkend="ClutterActor"><type>ClutterActor</type></link> "child".
</para>
<para>
The <link linkend="clutter-actor-get-preferred-size"><function>clutter_actor_get_preferred_size()</function></link> function will implement this
check for you.</para>
<para>

</para><para>Default value: CLUTTER_REQUEST_HEIGHT_FOR_WIDTH</para>
<para>Since  0.8
</para>
</refsect2>
<refsect2 id="ClutterActor--rotation-angle-x"><title>The <literal>&quot;rotation-angle-x&quot;</literal> property</title>
<indexterm zone="ClutterActor--rotation-angle-x"><primary>ClutterActor:rotation-angle-x</primary></indexterm><programlisting>  &quot;rotation-angle-x&quot;         <link linkend="gdouble">gdouble</link>               : Read / Write</programlisting>
<para>The rotation angle on the X axis.</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="ClutterActor--rotation-angle-y"><title>The <literal>&quot;rotation-angle-y&quot;</literal> property</title>
<indexterm zone="ClutterActor--rotation-angle-y"><primary>ClutterActor:rotation-angle-y</primary></indexterm><programlisting>  &quot;rotation-angle-y&quot;         <link linkend="gdouble">gdouble</link>               : Read / Write</programlisting>
<para>The rotation angle on the Y axis.</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="ClutterActor--rotation-angle-z"><title>The <literal>&quot;rotation-angle-z&quot;</literal> property</title>
<indexterm zone="ClutterActor--rotation-angle-z"><primary>ClutterActor:rotation-angle-z</primary></indexterm><programlisting>  &quot;rotation-angle-z&quot;         <link linkend="gdouble">gdouble</link>               : Read / Write</programlisting>
<para>The rotation angle on the Z axis.</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="ClutterActor--rotation-center-x"><title>The <literal>&quot;rotation-center-x&quot;</literal> property</title>
<indexterm zone="ClutterActor--rotation-center-x"><primary>ClutterActor:rotation-center-x</primary></indexterm><programlisting>  &quot;rotation-center-x&quot;        <link linkend="ClutterVertex">ClutterVertex</link>*        : Read / Write</programlisting>
<para>The rotation center on the X axis.</para></refsect2>
<refsect2 id="ClutterActor--rotation-center-y"><title>The <literal>&quot;rotation-center-y&quot;</literal> property</title>
<indexterm zone="ClutterActor--rotation-center-y"><primary>ClutterActor:rotation-center-y</primary></indexterm><programlisting>  &quot;rotation-center-y&quot;        <link linkend="ClutterVertex">ClutterVertex</link>*        : Read / Write</programlisting>
<para>The rotation center on the Y axis.</para></refsect2>
<refsect2 id="ClutterActor--rotation-center-z"><title>The <literal>&quot;rotation-center-z&quot;</literal> property</title>
<indexterm zone="ClutterActor--rotation-center-z"><primary>ClutterActor:rotation-center-z</primary></indexterm><programlisting>  &quot;rotation-center-z&quot;        <link linkend="ClutterVertex">ClutterVertex</link>*        : Read / Write</programlisting>
<para>The rotation center on the Z axis.</para></refsect2>
<refsect2 id="ClutterActor--scale-x"><title>The <literal>&quot;scale-x&quot;</literal> property</title>
<indexterm zone="ClutterActor--scale-x"><primary>ClutterActor:scale-x</primary></indexterm><programlisting>  &quot;scale-x&quot;                  <link linkend="gdouble">gdouble</link>               : Read / Write</programlisting>
<para>Scale factor on the X axis.</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 1</para>
</refsect2>
<refsect2 id="ClutterActor--scale-y"><title>The <literal>&quot;scale-y&quot;</literal> property</title>
<indexterm zone="ClutterActor--scale-y"><primary>ClutterActor:scale-y</primary></indexterm><programlisting>  &quot;scale-y&quot;                  <link linkend="gdouble">gdouble</link>               : Read / Write</programlisting>
<para>Scale factor on the Y axis.</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 1</para>
</refsect2>
<refsect2 id="ClutterActor--show-on-set-parent"><title>The <literal>&quot;show-on-set-parent&quot;</literal> property</title>
<indexterm zone="ClutterActor--show-on-set-parent" role="0.8"><primary>ClutterActor:show-on-set-parent</primary></indexterm><programlisting>  &quot;show-on-set-parent&quot;       <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
If <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, the actor is automatically shown when parented.
</para>
<para>
Calling <link linkend="clutter-actor-hide"><function>clutter_actor_hide()</function></link> on an actor which has not been
parented will set this property to <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> as a side effect.</para>
<para>

</para><para>Default value: TRUE</para>
<para>Since  0.8
</para>
</refsect2>
<refsect2 id="ClutterActor--visible"><title>The <literal>&quot;visible&quot;</literal> property</title>
<indexterm zone="ClutterActor--visible"><primary>ClutterActor:visible</primary></indexterm><programlisting>  &quot;visible&quot;                  <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
Whether the actor is visible or not.</para>
<para>

</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="ClutterActor--width"><title>The <literal>&quot;width&quot;</literal> property</title>
<indexterm zone="ClutterActor--width"><primary>ClutterActor:width</primary></indexterm><programlisting>  &quot;width&quot;                    <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>
Width of the actor (in pixels). If written, forces the minimum and
natural size request of the actor to the given width. If read, returns
the allocated width if available, otherwise the width request.</para>
<para>

</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="ClutterActor--x"><title>The <literal>&quot;x&quot;</literal> property</title>
<indexterm zone="ClutterActor--x"><primary>ClutterActor:x</primary></indexterm><programlisting>  &quot;x&quot;                        <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>
X coordinate of the actor in pixels. If written, forces a fixed
position for the actor. If read, returns the fixed position if any,
otherwise the allocation if available, otherwise 0.</para>
<para>

</para><para>Allowed values: &gt;= -2147483647</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="ClutterActor--y"><title>The <literal>&quot;y&quot;</literal> property</title>
<indexterm zone="ClutterActor--y"><primary>ClutterActor:y</primary></indexterm><programlisting>  &quot;y&quot;                        <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>
Y coordinate of the actor in pixels. If written, forces a fixed
position for the actor.  If read, returns the fixed position if
any, otherwise the allocation if available, otherwise 0.</para>
<para>

</para><para>Allowed values: &gt;= -2147483647</para>
<para>Default value: 0</para>
</refsect2>

</refsect1>

<refsect1 id="ClutterActor.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="ClutterActor-button-press-event"><title>The <literal>&quot;button-press-event&quot;</literal> signal</title>
<indexterm zone="ClutterActor-button-press-event" role="0.6"><primary>ClutterActor::button-press-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="ClutterEvent">ClutterEvent</link> *event,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::button-press-event signal is emitted each time a mouse button
is pressed on <parameter>actor</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the actor which received the event
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterButtonEvent"><type>ClutterButtonEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the event has been handled by the actor,
  or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> to continue the emission.

</simpara></listitem></varlistentry>
</variablelist><para>Since  0.6
</para></refsect2><refsect2 id="ClutterActor-button-release-event"><title>The <literal>&quot;button-release-event&quot;</literal> signal</title>
<indexterm zone="ClutterActor-button-release-event" role="0.6"><primary>ClutterActor::button-release-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="ClutterEvent">ClutterEvent</link> *event,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::button-release-event signal is emitted each time a mouse button
is released on <parameter>actor</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the actor which received the event
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterButtonEvent"><type>ClutterButtonEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the event has been handled by the actor,
  or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> to continue the emission.

</simpara></listitem></varlistentry>
</variablelist><para>Since  0.6
</para></refsect2><refsect2 id="ClutterActor-captured-event"><title>The <literal>&quot;captured-event&quot;</literal> signal</title>
<indexterm zone="ClutterActor-captured-event" role="0.6"><primary>ClutterActor::captured-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="ClutterEvent">ClutterEvent</link> *event,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::captured-event signal is emitted when an event is captured
by Clutter. This signal will be emitted starting from the top-level
container (the <link linkend="ClutterStage"><type>ClutterStage</type></link>) to the actor which received the event
going down the hierarchy. This signal can be used to intercept every
event before the specialized events (like
ClutterActor::button-press-event or ::key-released-event) are
emitted.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the actor which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterEvent"><type>ClutterEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the event has been handled by the actor,
  or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> to continue the emission.

</simpara></listitem></varlistentry>
</variablelist><para>Since  0.6
</para></refsect2><refsect2 id="ClutterActor-destroy"><title>The <literal>&quot;destroy&quot;</literal> signal</title>
<indexterm zone="ClutterActor-destroy" role="0.2"><primary>ClutterActor::destroy</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Cleanup / No Recursion / No Hooks</programlisting>
<para>
The ::destroy signal is emitted when an actor is destroyed,
either by direct invocation of <link linkend="clutter-actor-destroy"><function>clutter_actor_destroy()</function></link> or
when the <link linkend="ClutterGroup"><type>ClutterGroup</type></link> that contains the actor is destroyed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since  0.2
</para></refsect2><refsect2 id="ClutterActor-enter-event"><title>The <literal>&quot;enter-event&quot;</literal> signal</title>
<indexterm zone="ClutterActor-enter-event" role="0.6"><primary>ClutterActor::enter-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="ClutterEvent">ClutterEvent</link> *event,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::enter-event signal is emitted when the pointer enters the <parameter>actor</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the actor which the pointer has entered.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterCrossingEvent"><type>ClutterCrossingEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the event has been handled by the actor,
  or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> to continue the emission.

</simpara></listitem></varlistentry>
</variablelist><para>Since  0.6
</para></refsect2><refsect2 id="ClutterActor-event"><title>The <literal>&quot;event&quot;</literal> signal</title>
<indexterm zone="ClutterActor-event" role="0.6"><primary>ClutterActor::event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="ClutterEvent">ClutterEvent</link> *event,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::event signal is emitted each time an event is received
by the <parameter>actor</parameter>. This signal will be emitted on every actor,
following the hierarchy chain, until it reaches the top-level
container (the <link linkend="ClutterStage"><type>ClutterStage</type></link>).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the actor which received the event
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterEvent"><type>ClutterEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the event has been handled by the actor,
  or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> to continue the emission.

</simpara></listitem></varlistentry>
</variablelist><para>Since  0.6
</para></refsect2><refsect2 id="ClutterActor-focus-in"><title>The <literal>&quot;focus-in&quot;</literal> signal</title>
<indexterm zone="ClutterActor-focus-in" role="0.6"><primary>ClutterActor::focus-in</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::focus-in signal is emitted when <parameter>actor</parameter> recieves key focus.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the actor which now has key focus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since  0.6
</para></refsect2><refsect2 id="ClutterActor-focus-out"><title>The <literal>&quot;focus-out&quot;</literal> signal</title>
<indexterm zone="ClutterActor-focus-out" role="0.6"><primary>ClutterActor::focus-out</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::focus-out signal is emitted when <parameter>actor</parameter> loses key focus.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the actor which now has key focus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since  0.6
</para></refsect2><refsect2 id="ClutterActor-hide"><title>The <literal>&quot;hide&quot;</literal> signal</title>
<indexterm zone="ClutterActor-hide" role="0.2"><primary>ClutterActor::hide</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run First</programlisting>
<para>
The ::hide signal is emitted when an actor is no longer rendered
on the stage.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since  0.2
</para></refsect2><refsect2 id="ClutterActor-key-press-event"><title>The <literal>&quot;key-press-event&quot;</literal> signal</title>
<indexterm zone="ClutterActor-key-press-event" role="0.6"><primary>ClutterActor::key-press-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="ClutterEvent">ClutterEvent</link> *event,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::key-press-event signal is emitted each time a keyboard button
is pressed while <parameter>actor</parameter> has key focus (see <link linkend="clutter-stage-set-key-focus"><function>clutter_stage_set_key_focus()</function></link>).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the actor which received the event
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterKeyEvent"><type>ClutterKeyEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the event has been handled by the actor,
  or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> to continue the emission.

</simpara></listitem></varlistentry>
</variablelist><para>Since  0.6
</para></refsect2><refsect2 id="ClutterActor-key-release-event"><title>The <literal>&quot;key-release-event&quot;</literal> signal</title>
<indexterm zone="ClutterActor-key-release-event" role="0.6"><primary>ClutterActor::key-release-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="ClutterEvent">ClutterEvent</link> *event,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::key-release-event signal is emitted each time a keyboard button
is released while <parameter>actor</parameter> has key focus (see
<link linkend="clutter-stage-set-key-focus"><function>clutter_stage_set_key_focus()</function></link>).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the actor which received the event
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterKeyEvent"><type>ClutterKeyEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the event has been handled by the actor,
  or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> to continue the emission.

</simpara></listitem></varlistentry>
</variablelist><para>Since  0.6
</para></refsect2><refsect2 id="ClutterActor-leave-event"><title>The <literal>&quot;leave-event&quot;</literal> signal</title>
<indexterm zone="ClutterActor-leave-event" role="0.6"><primary>ClutterActor::leave-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="ClutterEvent">ClutterEvent</link> *event,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::leave-event signal is emitted when the pointer leaves the <parameter>actor</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the actor which the pointer has left
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterCrossingEvent"><type>ClutterCrossingEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the event has been handled by the actor,
  or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> to continue the emission.

</simpara></listitem></varlistentry>
</variablelist><para>Since  0.6
</para></refsect2><refsect2 id="ClutterActor-motion-event"><title>The <literal>&quot;motion-event&quot;</literal> signal</title>
<indexterm zone="ClutterActor-motion-event" role="0.6"><primary>ClutterActor::motion-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="ClutterEvent">ClutterEvent</link> *event,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::motion-event signal is emitted each time the mouse pointer is
moved over <parameter>actor</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the actor which received the event
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterMotionEvent"><type>ClutterMotionEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the event has been handled by the actor,
  or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> to continue the emission.

</simpara></listitem></varlistentry>
</variablelist><para>Since  0.6
</para></refsect2><refsect2 id="ClutterActor-paint"><title>The <literal>&quot;paint&quot;</literal> signal</title>
<indexterm zone="ClutterActor-paint" role="0.8"><primary>ClutterActor::paint</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::paint signal is emitted each time an actor is being painted.
</para>
<para>
Subclasses of <link linkend="ClutterActor"><type>ClutterActor</type></link> should override the class signal handler
and paint themselves in that function.
</para>
<para>
It is possible to connect a handler to the ::paint signal in order
to set up some custom aspect of a paint.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="ClutterActor"><type>ClutterActor</type></link> that received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since  0.8
</para></refsect2><refsect2 id="ClutterActor-parent-set"><title>The <literal>&quot;parent-set&quot;</literal> signal</title>
<indexterm zone="ClutterActor-parent-set" role="0.2"><primary>ClutterActor::parent-set</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="ClutterActor">ClutterActor</link> *old_parent,
                                                        <link linkend="gpointer">gpointer</link>      user_data)       : Run Last</programlisting>
<para>
This signal is emitted when the parent of the actor changes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>old_parent</parameter>&nbsp;:</term>
<listitem><simpara> the previous parent of the actor, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since  0.2
</para></refsect2><refsect2 id="ClutterActor-realize"><title>The <literal>&quot;realize&quot;</literal> signal</title>
<indexterm zone="ClutterActor-realize" role="0.8"><primary>ClutterActor::realize</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::realize signal is emitted each time an actor is being
realized.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="ClutterActor"><type>ClutterActor</type></link> that received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since  0.8
</para></refsect2><refsect2 id="ClutterActor-scroll-event"><title>The <literal>&quot;scroll-event&quot;</literal> signal</title>
<indexterm zone="ClutterActor-scroll-event" role="0.6"><primary>ClutterActor::scroll-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="ClutterEvent">ClutterEvent</link> *event,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::scroll-event signal is emitted each time the mouse is
scrolled on <parameter>actor</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the actor which received the event
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="ClutterScrollEvent"><type>ClutterScrollEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the event has been handled by the actor,
  or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> to continue the emission.

</simpara></listitem></varlistentry>
</variablelist><para>Since  0.6
</para></refsect2><refsect2 id="ClutterActor-show"><title>The <literal>&quot;show&quot;</literal> signal</title>
<indexterm zone="ClutterActor-show" role="0.2"><primary>ClutterActor::show</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run First</programlisting>
<para>
The ::show signal is emitted when an actor is visible and
rendered on the stage.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since  0.2
</para></refsect2><refsect2 id="ClutterActor-unrealize"><title>The <literal>&quot;unrealize&quot;</literal> signal</title>
<indexterm zone="ClutterActor-unrealize" role="0.8"><primary>ClutterActor::unrealize</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="ClutterActor">ClutterActor</link> *actor,
                                                        <link linkend="gpointer">gpointer</link>      user_data)      : Run Last</programlisting>
<para>
The ::unrealize signal is emitted each time an actor is being
unrealized.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>actor</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="ClutterActor"><type>ClutterActor</type></link> that received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since  0.8
</para></refsect2>
</refsect1>



</refentry>
