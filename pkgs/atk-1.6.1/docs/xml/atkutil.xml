<refentry id="AtkUtil">
<refmeta>
<refentrytitle>AtkUtil</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>ATK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AtkUtil</refname><refpurpose>This is a utility class which supports the adding and removal of event listeners.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



struct      <link linkend="AtkUtil-struct">AtkUtil</link>;
enum        <link linkend="AtkCoordType">AtkCoordType</link>;
<link linkend="guint">guint</link>       <link linkend="atk-add-focus-tracker">atk_add_focus_tracker</link>           (<link linkend="AtkEventListener">AtkEventListener</link> focus_tracker);
<link linkend="void">void</link>        <link linkend="atk-remove-focus-tracker">atk_remove_focus_tracker</link>        (<link linkend="guint">guint</link> tracker_id);
<link linkend="void">void</link>        <link linkend="atk-focus-tracker-init">atk_focus_tracker_init</link>          (<link linkend="AtkEventListenerInit">AtkEventListenerInit</link> add_function);
<link linkend="void">void</link>        <link linkend="atk-focus-tracker-notify">atk_focus_tracker_notify</link>        (<link linkend="AtkObject">AtkObject</link> *object);
<link linkend="void">void</link>        (<link linkend="AtkEventListener">*AtkEventListener</link>)             (<link linkend="AtkObject">AtkObject</link>*);
<link linkend="void">void</link>        (<link linkend="AtkEventListenerInit">*AtkEventListenerInit</link>)         (void);
<link linkend="guint">guint</link>       <link linkend="atk-add-global-event-listener">atk_add_global_event_listener</link>   (<link linkend="GSignalEmissionHook">GSignalEmissionHook</link> listener,
                                             const <link linkend="gchar">gchar</link> *event_type);
<link linkend="void">void</link>        <link linkend="atk-remove-global-event-listener">atk_remove_global_event_listener</link>
                                            (<link linkend="guint">guint</link> listener_id);
struct      <link linkend="AtkKeyEventStruct">AtkKeyEventStruct</link>;
enum        <link linkend="AtkKeyEventType">AtkKeyEventType</link>;
<link linkend="gint">gint</link>        (<link linkend="AtkKeySnoopFunc">*AtkKeySnoopFunc</link>)              (<link linkend="AtkKeyEventStruct">AtkKeyEventStruct</link> *event,
                                             <link linkend="gpointer">gpointer</link> func_data);
<link linkend="guint">guint</link>       <link linkend="atk-add-key-event-listener">atk_add_key_event_listener</link>      (<link linkend="AtkKeySnoopFunc">AtkKeySnoopFunc</link> listener,
                                             <link linkend="gpointer">gpointer</link> data);
<link linkend="void">void</link>        <link linkend="atk-remove-key-event-listener">atk_remove_key_event_listener</link>   (<link linkend="guint">guint</link> listener_id);
<link linkend="AtkObject">AtkObject</link>*  <link linkend="atk-get-root">atk_get_root</link>                    (void);
<link linkend="AtkObject">AtkObject</link>*  <link linkend="atk-get-focus-object">atk_get_focus_object</link>            (void);
G_CONST_RETURN <link linkend="gchar">gchar</link>* <link linkend="atk-get-toolkit-name">atk_get_toolkit_name</link>  (void);
G_CONST_RETURN <link linkend="gchar">gchar</link>* <link linkend="atk-get-toolkit-version">atk_get_toolkit_version</link>
                                            (void);

</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----AtkUtil
</synopsis>

</refsect1>








<refsect1>
<title>Description</title>
<para>
This is a utility class which supports the adding and removal of event 
listeners. The adding and removing of the listeners must be done in the 
same thread. The file also contains a number of utility functions.

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="AtkUtil-struct"/>struct AtkUtil</title>
<indexterm><primary>AtkUtil</primary></indexterm><programlisting>struct AtkUtil;</programlisting>
<para>
The AtkObject structure should not be accessed directly.

</para></refsect2>
<refsect2>
<title><anchor id="AtkCoordType"/>enum AtkCoordType</title>
<indexterm><primary>AtkCoordType</primary></indexterm><programlisting>typedef enum {
  ATK_XY_SCREEN,
  ATK_XY_WINDOW
}AtkCoordType;
</programlisting>
<para>
Specifies how xy coordinates are to be interpreted. Used by functions such
as <link linkend="atk-component-get-position"><function>atk_component_get_position()</function></link> and <link linkend="atk-text-get-character-extents"><function>atk_text_get_character_extents()</function></link></para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>ATK_XY_SCREEN</literal></term>
<listitem><simpara> specifies xy coordinates relative to the screen
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_XY_WINDOW</literal></term>
<listitem><simpara> specifies xy coordinates relative to the widget's 
top-level window
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-add-focus-tracker"/>atk_add_focus_tracker ()</title>
<indexterm><primary>atk_add_focus_tracker</primary></indexterm><programlisting><link linkend="guint">guint</link>       atk_add_focus_tracker           (<link linkend="AtkEventListener">AtkEventListener</link> focus_tracker);</programlisting>
<para>
Adds the specified function to the list of functions to be called
when an object receives focus.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>focus_tracker</parameter>&nbsp;:</term>
<listitem><simpara> Function to be added to the list of functions to be called
when an object receives focus.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> added focus tracker id, or 0 on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-remove-focus-tracker"/>atk_remove_focus_tracker ()</title>
<indexterm><primary>atk_remove_focus_tracker</primary></indexterm><programlisting><link linkend="void">void</link>        atk_remove_focus_tracker        (<link linkend="guint">guint</link> tracker_id);</programlisting>
<para>
Removes the specified focus tracker from the list of functions
to be called when any object receives focus.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>tracker_id</parameter>&nbsp;:</term>
<listitem><simpara> the id of the focus tracker to remove
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-focus-tracker-init"/>atk_focus_tracker_init ()</title>
<indexterm><primary>atk_focus_tracker_init</primary></indexterm><programlisting><link linkend="void">void</link>        atk_focus_tracker_init          (<link linkend="AtkEventListenerInit">AtkEventListenerInit</link> add_function);</programlisting>
<para>
Specifies the function to be called for focus tracker initialization.
This function should be called by an implementation of the
ATK interface if any specific work needs to be done to enable
focus tracking.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>add_function</parameter>&nbsp;:</term>
<listitem><simpara> Function to be called for focus tracker initialization
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-focus-tracker-notify"/>atk_focus_tracker_notify ()</title>
<indexterm><primary>atk_focus_tracker_notify</primary></indexterm><programlisting><link linkend="void">void</link>        atk_focus_tracker_notify        (<link linkend="AtkObject">AtkObject</link> *object);</programlisting>
<para>
Cause the focus tracker functions which have been specified to be
executed for the object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AtkEventListener"/>AtkEventListener ()</title>
<indexterm><primary>AtkEventListener</primary></indexterm><programlisting><link linkend="void">void</link>        (*AtkEventListener)             (<link linkend="AtkObject">AtkObject</link>*);</programlisting>
<para>
An AtkEventListener is user specified function which is called when an event,
such as receiving focus, occurs. The parameter of the AtkEventListener is the
AtkObject on which the event occurred.
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AtkEventListenerInit"/>AtkEventListenerInit ()</title>
<indexterm><primary>AtkEventListenerInit</primary></indexterm><programlisting><link linkend="void">void</link>        (*AtkEventListenerInit)         (void);</programlisting>
<para>
An AtkEventListenerInit is an initialization function in an implementation 
of the ATK interface used to perform implementation-specific initialization
when enabling focus tracking.

</para></refsect2>
<refsect2>
<title><anchor id="atk-add-global-event-listener"/>atk_add_global_event_listener ()</title>
<indexterm><primary>atk_add_global_event_listener</primary></indexterm><programlisting><link linkend="guint">guint</link>       atk_add_global_event_listener   (<link linkend="GSignalEmissionHook">GSignalEmissionHook</link> listener,
                                             const <link linkend="gchar">gchar</link> *event_type);</programlisting>
<para>
Adds the specified function to the list of functions to be called
when an event of type event_type occurs.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>listener</parameter>&nbsp;:</term>
<listitem><simpara> the listener to notify
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event_type</parameter>&nbsp;:</term>
<listitem><simpara> the type of event for which notification is requested
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> added event listener id, or 0 on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-remove-global-event-listener"/>atk_remove_global_event_listener ()</title>
<indexterm><primary>atk_remove_global_event_listener</primary></indexterm><programlisting><link linkend="void">void</link>        atk_remove_global_event_listener
                                            (<link linkend="guint">guint</link> listener_id);</programlisting>
<para>
Removes the specified event listener</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>listener_id</parameter>&nbsp;:</term>
<listitem><simpara> the id of the event listener to remove
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AtkKeyEventStruct"/>struct AtkKeyEventStruct</title>
<indexterm><primary>AtkKeyEventStruct</primary></indexterm><programlisting>struct AtkKeyEventStruct {

  gint type;
  guint state;
  guint keyval;
  gint length;
  gchar *string;
  guint16 keycode;
  guint32 timestamp;	
};
</programlisting>
<para>
The AtkKeyEventStruct describes a keyboard event.
</para></refsect2>
<refsect2>
<title><anchor id="AtkKeyEventType"/>enum AtkKeyEventType</title>
<indexterm><primary>AtkKeyEventType</primary></indexterm><programlisting>typedef enum
{
  ATK_KEY_EVENT_PRESS,
  ATK_KEY_EVENT_RELEASE,
  ATK_KEY_EVENT_LAST_DEFINED
} AtkKeyEventType;
</programlisting>
<para>
Specifies the type of a keyboard evemt.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>ATK_KEY_EVENT_PRESS</literal></term>
<listitem><simpara> specifies a key press event
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_KEY_EVENT_RELEASE</literal></term>
<listitem><simpara> specifies a key release event
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_KEY_EVENT_LAST_DEFINED</literal></term>
<listitem><simpara> Not a valid value; specifies end of enumeration
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AtkKeySnoopFunc"/>AtkKeySnoopFunc ()</title>
<indexterm><primary>AtkKeySnoopFunc</primary></indexterm><programlisting><link linkend="gint">gint</link>        (*AtkKeySnoopFunc)              (<link linkend="AtkKeyEventStruct">AtkKeyEventStruct</link> *event,
                                             <link linkend="gpointer">gpointer</link> func_data);</programlisting>
<para>
An AtkKeySnoopFunc is a function which is called when a keyboard event occurs.
</para><variablelist role="params">
<varlistentry><term><parameter>event</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-add-key-event-listener"/>atk_add_key_event_listener ()</title>
<indexterm><primary>atk_add_key_event_listener</primary></indexterm><programlisting><link linkend="guint">guint</link>       atk_add_key_event_listener      (<link linkend="AtkKeySnoopFunc">AtkKeySnoopFunc</link> listener,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Adds the specified function to the list of functions to be called
       when a key event occurs.  The <parameter>data</parameter> element will be passed to the
       <link linkend="AtkKeySnoopFunc"><type>AtkKeySnoopFunc</type></link> (<parameter>listener</parameter>) as the <parameter>func_data</parameter> param, on notification.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>listener</parameter>&nbsp;:</term>
<listitem><simpara> the listener to notify
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="gpointer"><type>gpointer</type></link> that points to a block of data that should be sent to the registered listeners,
       along with the event notification, when it occurs.  
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> added event listener id, or 0 on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-remove-key-event-listener"/>atk_remove_key_event_listener ()</title>
<indexterm><primary>atk_remove_key_event_listener</primary></indexterm><programlisting><link linkend="void">void</link>        atk_remove_key_event_listener   (<link linkend="guint">guint</link> listener_id);</programlisting>
<para>
Removes the specified event listener</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>listener_id</parameter>&nbsp;:</term>
<listitem><simpara> the id of the event listener to remove
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-get-root"/>atk_get_root ()</title>
<indexterm><primary>atk_get_root</primary></indexterm><programlisting><link linkend="AtkObject">AtkObject</link>*  atk_get_root                    (void);</programlisting>
<para>
Gets the root accessible container for the current application.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the root accessible container for the current application
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-get-focus-object"/>atk_get_focus_object ()</title>
<indexterm><primary>atk_get_focus_object</primary></indexterm><programlisting><link linkend="AtkObject">AtkObject</link>*  atk_get_focus_object            (void);</programlisting>
<para>
Gets the currently focused object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the currently focused object for the current application
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-get-toolkit-name"/>atk_get_toolkit_name ()</title>
<indexterm><primary>atk_get_toolkit_name</primary></indexterm><programlisting>G_CONST_RETURN <link linkend="gchar">gchar</link>* atk_get_toolkit_name  (void);</programlisting>
<para>
Gets name string for the GUI toolkit implementing ATK for this application.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> name string for the GUI toolkit implementing ATK for this application
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-get-toolkit-version"/>atk_get_toolkit_version ()</title>
<indexterm><primary>atk_get_toolkit_version</primary></indexterm><programlisting>G_CONST_RETURN <link linkend="gchar">gchar</link>* atk_get_toolkit_version
                                            (void);</programlisting>
<para>
Gets version string for the GUI toolkit implementing ATK for this application.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> version string for the GUI toolkit implementing ATK for this application
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
