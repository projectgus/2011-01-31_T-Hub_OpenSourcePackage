CR: TLSbo89785
Patch name: TLSbo89785_Use-WDOG-SRS-bit-for-arch_reset.patch
Date: Tue Mar 6 09:45:28 2007 -0600
Source: Freescale Semiconductor, Inc.
Description: Instead of waiting for wdog timeout, we can simply clear
the WDOG SRS bit to reset the system.
===================================================================
diff -uNpr linux-2.6.19.2.orig/arch/arm/mach-mx27/system.c linux-2.6.19.2/arch/arm/mach-mx27/system.c
--- linux-2.6.19.2.orig/arch/arm/mach-mx27/system.c	2007-04-25 17:37:51.000000000 -0600
+++ linux-2.6.19.2/arch/arm/mach-mx27/system.c	2007-04-25 17:38:32.000000000 -0600
@@ -53,7 +53,8 @@ void arch_idle(void)
 	cpu_do_idle();
 }
 
-#define WDT_WCR_WDE             0x0004
+#define WDOG_WCR_REG                    IO_ADDRESS(WDOG_BASE_ADDR)
+#define WDOG_WCR_SRS                    (1 << 4)
 
 /*
  * This function resets the system. It is called by machine_restart().
@@ -62,11 +63,11 @@ void arch_idle(void)
  */
 void arch_reset(char mode)
 {
-	u16 v;
 	struct clk *clk;
 
 	clk = clk_get(NULL, "wdog_clk");
 	clk_enable(clk);
-	v = __raw_readw(IO_ADDRESS(WDOG_BASE_ADDR));
-	__raw_writew(v | WDT_WCR_WDE, IO_ADDRESS(WDOG_BASE_ADDR));
+
+	/* Assert SRS signal */
+	__raw_writew(__raw_readw(WDOG_WCR_REG) & ~WDOG_WCR_SRS, WDOG_WCR_REG);
 }
diff -uNpr linux-2.6.19.2.orig/arch/arm/mach-mx3/system.c linux-2.6.19.2/arch/arm/mach-mx3/system.c
--- linux-2.6.19.2.orig/arch/arm/mach-mx3/system.c	2007-04-25 17:37:55.000000000 -0600
+++ linux-2.6.19.2/arch/arm/mach-mx3/system.c	2007-04-25 17:38:32.000000000 -0600
@@ -18,6 +18,7 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
+#include <linux/clk.h>
 #include <asm/io.h>
 #include <asm/hardware.h>
 #include <asm/proc-fns.h>
@@ -55,6 +56,9 @@ void arch_idle(void)
 	}
 }
 
+#define WDOG_WCR_REG                    IO_ADDRESS(WDOG_BASE_ADDR)
+#define WDOG_WCR_SRS                    (1 << 4)
+
 /*
  * This function resets the system. It is called by machine_restart().
  *
@@ -62,13 +66,11 @@ void arch_idle(void)
  */
 void arch_reset(char mode)
 {
-	if ((__raw_readw(IO_ADDRESS(WDOG_BASE_ADDR)) & 0x4) != 0) {
-		/* If WDOG enabled, wait till it's timed out */
-		asm("cpsid iaf");
-		while (1) {
-		}
-	} else {
-		__raw_writew(__raw_readw(IO_ADDRESS(WDOG_BASE_ADDR)) | 0x4,
-			     IO_ADDRESS(WDOG_BASE_ADDR));
-	}
+	struct clk *clk;
+
+	clk = clk_get(NULL, "wdog_clk");
+	clk_enable(clk);
+
+	/* Assert SRS signal */
+	__raw_writew(__raw_readw(WDOG_WCR_REG) & ~WDOG_WCR_SRS, WDOG_WCR_REG);
 }
